// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.2
// 	protoc        v5.29.3
// source: proto/wechat_rpc.proto

package wechat_rpc

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 消息类型
type MsgType int32

const (
	MsgType_MT_UNKNOWN  MsgType = 0
	MsgType_MT_TEXT     MsgType = 1     // 文本消息
	MsgType_MT_IMAGE    MsgType = 3     // 图片消息
	MsgType_MT_VOICE    MsgType = 34    // 语音消息
	MsgType_MT_EMOTION  MsgType = 47    // 表情消息
	MsgType_MT_LINK     MsgType = 49    // 链接消息
	MsgType_MT_FILE     MsgType = 1000  // 文件消息
	MsgType_MT_SYS      MsgType = 10000 // 系统消息
	MsgType_MT_RECALLED MsgType = 10002 // 撤回消息
)

// Enum value maps for MsgType.
var (
	MsgType_name = map[int32]string{
		0:     "MT_UNKNOWN",
		1:     "MT_TEXT",
		3:     "MT_IMAGE",
		34:    "MT_VOICE",
		47:    "MT_EMOTION",
		49:    "MT_LINK",
		1000:  "MT_FILE",
		10000: "MT_SYS",
		10002: "MT_RECALLED",
	}
	MsgType_value = map[string]int32{
		"MT_UNKNOWN":  0,
		"MT_TEXT":     1,
		"MT_IMAGE":    3,
		"MT_VOICE":    34,
		"MT_EMOTION":  47,
		"MT_LINK":     49,
		"MT_FILE":     1000,
		"MT_SYS":      10000,
		"MT_RECALLED": 10002,
	}
)

func (x MsgType) Enum() *MsgType {
	p := new(MsgType)
	*p = x
	return p
}

func (x MsgType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MsgType) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_wechat_rpc_proto_enumTypes[0].Descriptor()
}

func (MsgType) Type() protoreflect.EnumType {
	return &file_proto_wechat_rpc_proto_enumTypes[0]
}

func (x MsgType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MsgType.Descriptor instead.
func (MsgType) EnumDescriptor() ([]byte, []int) {
	return file_proto_wechat_rpc_proto_rawDescGZIP(), []int{0}
}

// 微信消息结构
type WxMsg struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Type          MsgType                `protobuf:"varint,1,opt,name=type,proto3,enum=wechat_rpc.MsgType" json:"type,omitempty"` // 消息类型
	Id            string                 `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`                              // 消息 id
	Xml           string                 `protobuf:"bytes,3,opt,name=xml,proto3" json:"xml,omitempty"`                            // 消息 xml 部分
	Sender        string                 `protobuf:"bytes,4,opt,name=sender,proto3" json:"sender,omitempty"`                      // 消息发送人
	Roomid        string                 `protobuf:"bytes,5,opt,name=roomid,proto3" json:"roomid,omitempty"`                      // 群 id (仅群消息有)
	Content       string                 `protobuf:"bytes,6,opt,name=content,proto3" json:"content,omitempty"`                    // 消息内容
	Thumb         string                 `protobuf:"bytes,7,opt,name=thumb,proto3" json:"thumb,omitempty"`                        // 视频或图片消息的缩略图路径
	Extra         string                 `protobuf:"bytes,8,opt,name=extra,proto3" json:"extra,omitempty"`                        // 视频或图片消息的路径
	Ts            int64                  `protobuf:"varint,9,opt,name=ts,proto3" json:"ts,omitempty"`                             // 消息时间戳
	Sign          string                 `protobuf:"bytes,10,opt,name=sign,proto3" json:"sign,omitempty"`                         // 消息签名
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WxMsg) Reset() {
	*x = WxMsg{}
	mi := &file_proto_wechat_rpc_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WxMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WxMsg) ProtoMessage() {}

func (x *WxMsg) ProtoReflect() protoreflect.Message {
	mi := &file_proto_wechat_rpc_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WxMsg.ProtoReflect.Descriptor instead.
func (*WxMsg) Descriptor() ([]byte, []int) {
	return file_proto_wechat_rpc_proto_rawDescGZIP(), []int{0}
}

func (x *WxMsg) GetType() MsgType {
	if x != nil {
		return x.Type
	}
	return MsgType_MT_UNKNOWN
}

func (x *WxMsg) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *WxMsg) GetXml() string {
	if x != nil {
		return x.Xml
	}
	return ""
}

func (x *WxMsg) GetSender() string {
	if x != nil {
		return x.Sender
	}
	return ""
}

func (x *WxMsg) GetRoomid() string {
	if x != nil {
		return x.Roomid
	}
	return ""
}

func (x *WxMsg) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *WxMsg) GetThumb() string {
	if x != nil {
		return x.Thumb
	}
	return ""
}

func (x *WxMsg) GetExtra() string {
	if x != nil {
		return x.Extra
	}
	return ""
}

func (x *WxMsg) GetTs() int64 {
	if x != nil {
		return x.Ts
	}
	return 0
}

func (x *WxMsg) GetSign() string {
	if x != nil {
		return x.Sign
	}
	return ""
}

// 联系人信息
type RpcContact struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Wxid          string                 `protobuf:"bytes,1,opt,name=wxid,proto3" json:"wxid,omitempty"`
	Code          string                 `protobuf:"bytes,2,opt,name=code,proto3" json:"code,omitempty"`
	Name          string                 `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Gender        int32                  `protobuf:"varint,4,opt,name=gender,proto3" json:"gender,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RpcContact) Reset() {
	*x = RpcContact{}
	mi := &file_proto_wechat_rpc_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RpcContact) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RpcContact) ProtoMessage() {}

func (x *RpcContact) ProtoReflect() protoreflect.Message {
	mi := &file_proto_wechat_rpc_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RpcContact.ProtoReflect.Descriptor instead.
func (*RpcContact) Descriptor() ([]byte, []int) {
	return file_proto_wechat_rpc_proto_rawDescGZIP(), []int{1}
}

func (x *RpcContact) GetWxid() string {
	if x != nil {
		return x.Wxid
	}
	return ""
}

func (x *RpcContact) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *RpcContact) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RpcContact) GetGender() int32 {
	if x != nil {
		return x.Gender
	}
	return 0
}

// 空消息
type Empty struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Empty) Reset() {
	*x = Empty{}
	mi := &file_proto_wechat_rpc_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Empty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Empty) ProtoMessage() {}

func (x *Empty) ProtoReflect() protoreflect.Message {
	mi := &file_proto_wechat_rpc_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Empty.ProtoReflect.Descriptor instead.
func (*Empty) Descriptor() ([]byte, []int) {
	return file_proto_wechat_rpc_proto_rawDescGZIP(), []int{2}
}

// 数据库名称列表
type DbNames struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Names         []string               `protobuf:"bytes,1,rep,name=names,proto3" json:"names,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DbNames) Reset() {
	*x = DbNames{}
	mi := &file_proto_wechat_rpc_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DbNames) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DbNames) ProtoMessage() {}

func (x *DbNames) ProtoReflect() protoreflect.Message {
	mi := &file_proto_wechat_rpc_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DbNames.ProtoReflect.Descriptor instead.
func (*DbNames) Descriptor() ([]byte, []int) {
	return file_proto_wechat_rpc_proto_rawDescGZIP(), []int{3}
}

func (x *DbNames) GetNames() []string {
	if x != nil {
		return x.Names
	}
	return nil
}

// 数据库表信息
type DbTable struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Sql           string                 `protobuf:"bytes,2,opt,name=sql,proto3" json:"sql,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DbTable) Reset() {
	*x = DbTable{}
	mi := &file_proto_wechat_rpc_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DbTable) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DbTable) ProtoMessage() {}

func (x *DbTable) ProtoReflect() protoreflect.Message {
	mi := &file_proto_wechat_rpc_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DbTable.ProtoReflect.Descriptor instead.
func (*DbTable) Descriptor() ([]byte, []int) {
	return file_proto_wechat_rpc_proto_rawDescGZIP(), []int{4}
}

func (x *DbTable) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DbTable) GetSql() string {
	if x != nil {
		return x.Sql
	}
	return ""
}

// 数据库表信息列表
type DbTables struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Tables        []*DbTable             `protobuf:"bytes,1,rep,name=tables,proto3" json:"tables,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DbTables) Reset() {
	*x = DbTables{}
	mi := &file_proto_wechat_rpc_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DbTables) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DbTables) ProtoMessage() {}

func (x *DbTables) ProtoReflect() protoreflect.Message {
	mi := &file_proto_wechat_rpc_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DbTables.ProtoReflect.Descriptor instead.
func (*DbTables) Descriptor() ([]byte, []int) {
	return file_proto_wechat_rpc_proto_rawDescGZIP(), []int{5}
}

func (x *DbTables) GetTables() []*DbTable {
	if x != nil {
		return x.Tables
	}
	return nil
}

// 数据库字段
type DbField struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Field         string                 `protobuf:"bytes,1,opt,name=field,proto3" json:"field,omitempty"`
	Value         []byte                 `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DbField) Reset() {
	*x = DbField{}
	mi := &file_proto_wechat_rpc_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DbField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DbField) ProtoMessage() {}

func (x *DbField) ProtoReflect() protoreflect.Message {
	mi := &file_proto_wechat_rpc_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DbField.ProtoReflect.Descriptor instead.
func (*DbField) Descriptor() ([]byte, []int) {
	return file_proto_wechat_rpc_proto_rawDescGZIP(), []int{6}
}

func (x *DbField) GetField() string {
	if x != nil {
		return x.Field
	}
	return ""
}

func (x *DbField) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

// 数据库查询结果行
type DbRow struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Fields        []*DbField             `protobuf:"bytes,1,rep,name=fields,proto3" json:"fields,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DbRow) Reset() {
	*x = DbRow{}
	mi := &file_proto_wechat_rpc_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DbRow) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DbRow) ProtoMessage() {}

func (x *DbRow) ProtoReflect() protoreflect.Message {
	mi := &file_proto_wechat_rpc_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DbRow.ProtoReflect.Descriptor instead.
func (*DbRow) Descriptor() ([]byte, []int) {
	return file_proto_wechat_rpc_proto_rawDescGZIP(), []int{7}
}

func (x *DbRow) GetFields() []*DbField {
	if x != nil {
		return x.Fields
	}
	return nil
}

// 数据库查询结果集
type DbRows struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Rows          []*DbRow               `protobuf:"bytes,1,rep,name=rows,proto3" json:"rows,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DbRows) Reset() {
	*x = DbRows{}
	mi := &file_proto_wechat_rpc_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DbRows) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DbRows) ProtoMessage() {}

func (x *DbRows) ProtoReflect() protoreflect.Message {
	mi := &file_proto_wechat_rpc_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DbRows.ProtoReflect.Descriptor instead.
func (*DbRows) Descriptor() ([]byte, []int) {
	return file_proto_wechat_rpc_proto_rawDescGZIP(), []int{8}
}

func (x *DbRows) GetRows() []*DbRow {
	if x != nil {
		return x.Rows
	}
	return nil
}

// 数据库查询请求
type DbQuery struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Db            string                 `protobuf:"bytes,1,opt,name=db,proto3" json:"db,omitempty"`
	Sql           string                 `protobuf:"bytes,2,opt,name=sql,proto3" json:"sql,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DbQuery) Reset() {
	*x = DbQuery{}
	mi := &file_proto_wechat_rpc_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DbQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DbQuery) ProtoMessage() {}

func (x *DbQuery) ProtoReflect() protoreflect.Message {
	mi := &file_proto_wechat_rpc_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DbQuery.ProtoReflect.Descriptor instead.
func (*DbQuery) Descriptor() ([]byte, []int) {
	return file_proto_wechat_rpc_proto_rawDescGZIP(), []int{9}
}

func (x *DbQuery) GetDb() string {
	if x != nil {
		return x.Db
	}
	return ""
}

func (x *DbQuery) GetSql() string {
	if x != nil {
		return x.Sql
	}
	return ""
}

// 路径消息
type PathMsg struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Path          string                 `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PathMsg) Reset() {
	*x = PathMsg{}
	mi := &file_proto_wechat_rpc_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PathMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PathMsg) ProtoMessage() {}

func (x *PathMsg) ProtoReflect() protoreflect.Message {
	mi := &file_proto_wechat_rpc_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PathMsg.ProtoReflect.Descriptor instead.
func (*PathMsg) Descriptor() ([]byte, []int) {
	return file_proto_wechat_rpc_proto_rawDescGZIP(), []int{10}
}

func (x *PathMsg) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

// 文本消息
type TextMsg struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Msg           string                 `protobuf:"bytes,1,opt,name=msg,proto3" json:"msg,omitempty"`
	Receiver      string                 `protobuf:"bytes,2,opt,name=receiver,proto3" json:"receiver,omitempty"`
	Aters         string                 `protobuf:"bytes,3,opt,name=aters,proto3" json:"aters,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TextMsg) Reset() {
	*x = TextMsg{}
	mi := &file_proto_wechat_rpc_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TextMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TextMsg) ProtoMessage() {}

func (x *TextMsg) ProtoReflect() protoreflect.Message {
	mi := &file_proto_wechat_rpc_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TextMsg.ProtoReflect.Descriptor instead.
func (*TextMsg) Descriptor() ([]byte, []int) {
	return file_proto_wechat_rpc_proto_rawDescGZIP(), []int{11}
}

func (x *TextMsg) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *TextMsg) GetReceiver() string {
	if x != nil {
		return x.Receiver
	}
	return ""
}

func (x *TextMsg) GetAters() string {
	if x != nil {
		return x.Aters
	}
	return ""
}

// XML 消息
type XmlMsg struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Receiver      string                 `protobuf:"bytes,1,opt,name=receiver,proto3" json:"receiver,omitempty"`
	Xml           string                 `protobuf:"bytes,2,opt,name=xml,proto3" json:"xml,omitempty"`
	Type          int32                  `protobuf:"varint,3,opt,name=type,proto3" json:"type,omitempty"`
	Path          string                 `protobuf:"bytes,4,opt,name=path,proto3" json:"path,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *XmlMsg) Reset() {
	*x = XmlMsg{}
	mi := &file_proto_wechat_rpc_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *XmlMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*XmlMsg) ProtoMessage() {}

func (x *XmlMsg) ProtoReflect() protoreflect.Message {
	mi := &file_proto_wechat_rpc_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use XmlMsg.ProtoReflect.Descriptor instead.
func (*XmlMsg) Descriptor() ([]byte, []int) {
	return file_proto_wechat_rpc_proto_rawDescGZIP(), []int{12}
}

func (x *XmlMsg) GetReceiver() string {
	if x != nil {
		return x.Receiver
	}
	return ""
}

func (x *XmlMsg) GetXml() string {
	if x != nil {
		return x.Xml
	}
	return ""
}

func (x *XmlMsg) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *XmlMsg) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

// 富文本消息
type RichText struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Account       string                 `protobuf:"bytes,2,opt,name=account,proto3" json:"account,omitempty"`
	Title         string                 `protobuf:"bytes,3,opt,name=title,proto3" json:"title,omitempty"`
	Digest        string                 `protobuf:"bytes,4,opt,name=digest,proto3" json:"digest,omitempty"`
	Url           string                 `protobuf:"bytes,5,opt,name=url,proto3" json:"url,omitempty"`
	Thumburl      string                 `protobuf:"bytes,6,opt,name=thumburl,proto3" json:"thumburl,omitempty"`
	Receiver      string                 `protobuf:"bytes,7,opt,name=receiver,proto3" json:"receiver,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RichText) Reset() {
	*x = RichText{}
	mi := &file_proto_wechat_rpc_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RichText) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RichText) ProtoMessage() {}

func (x *RichText) ProtoReflect() protoreflect.Message {
	mi := &file_proto_wechat_rpc_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RichText.ProtoReflect.Descriptor instead.
func (*RichText) Descriptor() ([]byte, []int) {
	return file_proto_wechat_rpc_proto_rawDescGZIP(), []int{13}
}

func (x *RichText) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RichText) GetAccount() string {
	if x != nil {
		return x.Account
	}
	return ""
}

func (x *RichText) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *RichText) GetDigest() string {
	if x != nil {
		return x.Digest
	}
	return ""
}

func (x *RichText) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *RichText) GetThumburl() string {
	if x != nil {
		return x.Thumburl
	}
	return ""
}

func (x *RichText) GetReceiver() string {
	if x != nil {
		return x.Receiver
	}
	return ""
}

// 拍一拍消息
type PatMsg struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Roomid        string                 `protobuf:"bytes,1,opt,name=roomid,proto3" json:"roomid,omitempty"`
	Wxid          string                 `protobuf:"bytes,2,opt,name=wxid,proto3" json:"wxid,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PatMsg) Reset() {
	*x = PatMsg{}
	mi := &file_proto_wechat_rpc_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PatMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatMsg) ProtoMessage() {}

func (x *PatMsg) ProtoReflect() protoreflect.Message {
	mi := &file_proto_wechat_rpc_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatMsg.ProtoReflect.Descriptor instead.
func (*PatMsg) Descriptor() ([]byte, []int) {
	return file_proto_wechat_rpc_proto_rawDescGZIP(), []int{14}
}

func (x *PatMsg) GetRoomid() string {
	if x != nil {
		return x.Roomid
	}
	return ""
}

func (x *PatMsg) GetWxid() string {
	if x != nil {
		return x.Wxid
	}
	return ""
}

// 转发消息请求
type ForwardMsgRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Receiver      string                 `protobuf:"bytes,2,opt,name=receiver,proto3" json:"receiver,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ForwardMsgRequest) Reset() {
	*x = ForwardMsgRequest{}
	mi := &file_proto_wechat_rpc_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ForwardMsgRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ForwardMsgRequest) ProtoMessage() {}

func (x *ForwardMsgRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_wechat_rpc_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ForwardMsgRequest.ProtoReflect.Descriptor instead.
func (*ForwardMsgRequest) Descriptor() ([]byte, []int) {
	return file_proto_wechat_rpc_proto_rawDescGZIP(), []int{15}
}

func (x *ForwardMsgRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ForwardMsgRequest) GetReceiver() string {
	if x != nil {
		return x.Receiver
	}
	return ""
}

// 解密路径
type DecPath struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Src           string                 `protobuf:"bytes,1,opt,name=src,proto3" json:"src,omitempty"`
	Dir           string                 `protobuf:"bytes,2,opt,name=dir,proto3" json:"dir,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DecPath) Reset() {
	*x = DecPath{}
	mi := &file_proto_wechat_rpc_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DecPath) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DecPath) ProtoMessage() {}

func (x *DecPath) ProtoReflect() protoreflect.Message {
	mi := &file_proto_wechat_rpc_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DecPath.ProtoReflect.Descriptor instead.
func (*DecPath) Descriptor() ([]byte, []int) {
	return file_proto_wechat_rpc_proto_rawDescGZIP(), []int{16}
}

func (x *DecPath) GetSrc() string {
	if x != nil {
		return x.Src
	}
	return ""
}

func (x *DecPath) GetDir() string {
	if x != nil {
		return x.Dir
	}
	return ""
}

// OCR 识别请求
type OcrMsg struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Extra         string                 `protobuf:"bytes,1,opt,name=extra,proto3" json:"extra,omitempty"`
	Timeout       int32                  `protobuf:"varint,2,opt,name=timeout,proto3" json:"timeout,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *OcrMsg) Reset() {
	*x = OcrMsg{}
	mi := &file_proto_wechat_rpc_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OcrMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OcrMsg) ProtoMessage() {}

func (x *OcrMsg) ProtoReflect() protoreflect.Message {
	mi := &file_proto_wechat_rpc_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OcrMsg.ProtoReflect.Descriptor instead.
func (*OcrMsg) Descriptor() ([]byte, []int) {
	return file_proto_wechat_rpc_proto_rawDescGZIP(), []int{17}
}

func (x *OcrMsg) GetExtra() string {
	if x != nil {
		return x.Extra
	}
	return ""
}

func (x *OcrMsg) GetTimeout() int32 {
	if x != nil {
		return x.Timeout
	}
	return 0
}

// 群成员管理
type MemberMgmt struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Roomid        string                 `protobuf:"bytes,1,opt,name=roomid,proto3" json:"roomid,omitempty"`
	Wxids         string                 `protobuf:"bytes,2,opt,name=wxids,proto3" json:"wxids,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MemberMgmt) Reset() {
	*x = MemberMgmt{}
	mi := &file_proto_wechat_rpc_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MemberMgmt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MemberMgmt) ProtoMessage() {}

func (x *MemberMgmt) ProtoReflect() protoreflect.Message {
	mi := &file_proto_wechat_rpc_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MemberMgmt.ProtoReflect.Descriptor instead.
func (*MemberMgmt) Descriptor() ([]byte, []int) {
	return file_proto_wechat_rpc_proto_rawDescGZIP(), []int{18}
}

func (x *MemberMgmt) GetRoomid() string {
	if x != nil {
		return x.Roomid
	}
	return ""
}

func (x *MemberMgmt) GetWxids() string {
	if x != nil {
		return x.Wxids
	}
	return ""
}

// 好友验证消息
type Verification struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	V3            string                 `protobuf:"bytes,1,opt,name=v3,proto3" json:"v3,omitempty"`
	V4            string                 `protobuf:"bytes,2,opt,name=v4,proto3" json:"v4,omitempty"`
	Scene         int32                  `protobuf:"varint,3,opt,name=scene,proto3" json:"scene,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Verification) Reset() {
	*x = Verification{}
	mi := &file_proto_wechat_rpc_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Verification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Verification) ProtoMessage() {}

func (x *Verification) ProtoReflect() protoreflect.Message {
	mi := &file_proto_wechat_rpc_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Verification.ProtoReflect.Descriptor instead.
func (*Verification) Descriptor() ([]byte, []int) {
	return file_proto_wechat_rpc_proto_rawDescGZIP(), []int{19}
}

func (x *Verification) GetV3() string {
	if x != nil {
		return x.V3
	}
	return ""
}

func (x *Verification) GetV4() string {
	if x != nil {
		return x.V4
	}
	return ""
}

func (x *Verification) GetScene() int32 {
	if x != nil {
		return x.Scene
	}
	return 0
}

// 转账消息
type Transfer struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Wxid          string                 `protobuf:"bytes,1,opt,name=wxid,proto3" json:"wxid,omitempty"`
	Transferid    string                 `protobuf:"bytes,2,opt,name=transferid,proto3" json:"transferid,omitempty"`
	Transactionid string                 `protobuf:"bytes,3,opt,name=transactionid,proto3" json:"transactionid,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Transfer) Reset() {
	*x = Transfer{}
	mi := &file_proto_wechat_rpc_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Transfer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Transfer) ProtoMessage() {}

func (x *Transfer) ProtoReflect() protoreflect.Message {
	mi := &file_proto_wechat_rpc_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Transfer.ProtoReflect.Descriptor instead.
func (*Transfer) Descriptor() ([]byte, []int) {
	return file_proto_wechat_rpc_proto_rawDescGZIP(), []int{20}
}

func (x *Transfer) GetWxid() string {
	if x != nil {
		return x.Wxid
	}
	return ""
}

func (x *Transfer) GetTransferid() string {
	if x != nil {
		return x.Transferid
	}
	return ""
}

func (x *Transfer) GetTransactionid() string {
	if x != nil {
		return x.Transactionid
	}
	return ""
}

// 刷新朋友圈请求
type RefreshPyqRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RefreshPyqRequest) Reset() {
	*x = RefreshPyqRequest{}
	mi := &file_proto_wechat_rpc_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RefreshPyqRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RefreshPyqRequest) ProtoMessage() {}

func (x *RefreshPyqRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_wechat_rpc_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RefreshPyqRequest.ProtoReflect.Descriptor instead.
func (*RefreshPyqRequest) Descriptor() ([]byte, []int) {
	return file_proto_wechat_rpc_proto_rawDescGZIP(), []int{21}
}

func (x *RefreshPyqRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

// 下载附件请求
type DownloadAttachRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Thumb         string                 `protobuf:"bytes,2,opt,name=thumb,proto3" json:"thumb,omitempty"`
	Extra         string                 `protobuf:"bytes,3,opt,name=extra,proto3" json:"extra,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DownloadAttachRequest) Reset() {
	*x = DownloadAttachRequest{}
	mi := &file_proto_wechat_rpc_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DownloadAttachRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DownloadAttachRequest) ProtoMessage() {}

func (x *DownloadAttachRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_wechat_rpc_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DownloadAttachRequest.ProtoReflect.Descriptor instead.
func (*DownloadAttachRequest) Descriptor() ([]byte, []int) {
	return file_proto_wechat_rpc_proto_rawDescGZIP(), []int{22}
}

func (x *DownloadAttachRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *DownloadAttachRequest) GetThumb() string {
	if x != nil {
		return x.Thumb
	}
	return ""
}

func (x *DownloadAttachRequest) GetExtra() string {
	if x != nil {
		return x.Extra
	}
	return ""
}

// 下载图片
type DownloadImage struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Extra         string                 `protobuf:"bytes,2,opt,name=extra,proto3" json:"extra,omitempty"`
	Dir           string                 `protobuf:"bytes,3,opt,name=dir,proto3" json:"dir,omitempty"`
	Timeout       int32                  `protobuf:"varint,4,opt,name=timeout,proto3" json:"timeout,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DownloadImage) Reset() {
	*x = DownloadImage{}
	mi := &file_proto_wechat_rpc_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DownloadImage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DownloadImage) ProtoMessage() {}

func (x *DownloadImage) ProtoReflect() protoreflect.Message {
	mi := &file_proto_wechat_rpc_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DownloadImage.ProtoReflect.Descriptor instead.
func (*DownloadImage) Descriptor() ([]byte, []int) {
	return file_proto_wechat_rpc_proto_rawDescGZIP(), []int{23}
}

func (x *DownloadImage) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *DownloadImage) GetExtra() string {
	if x != nil {
		return x.Extra
	}
	return ""
}

func (x *DownloadImage) GetDir() string {
	if x != nil {
		return x.Dir
	}
	return ""
}

func (x *DownloadImage) GetTimeout() int32 {
	if x != nil {
		return x.Timeout
	}
	return 0
}

// 获取语音消息请求
type GetAudioMsgRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Dir           string                 `protobuf:"bytes,2,opt,name=dir,proto3" json:"dir,omitempty"`
	Timeout       int32                  `protobuf:"varint,3,opt,name=timeout,proto3" json:"timeout,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetAudioMsgRequest) Reset() {
	*x = GetAudioMsgRequest{}
	mi := &file_proto_wechat_rpc_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetAudioMsgRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAudioMsgRequest) ProtoMessage() {}

func (x *GetAudioMsgRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_wechat_rpc_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAudioMsgRequest.ProtoReflect.Descriptor instead.
func (*GetAudioMsgRequest) Descriptor() ([]byte, []int) {
	return file_proto_wechat_rpc_proto_rawDescGZIP(), []int{24}
}

func (x *GetAudioMsgRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *GetAudioMsgRequest) GetDir() string {
	if x != nil {
		return x.Dir
	}
	return ""
}

func (x *GetAudioMsgRequest) GetTimeout() int32 {
	if x != nil {
		return x.Timeout
	}
	return 0
}

// 获取群名片请求
type GetAliasInChatRoomRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Wxid          string                 `protobuf:"bytes,1,opt,name=wxid,proto3" json:"wxid,omitempty"`
	Roomid        string                 `protobuf:"bytes,2,opt,name=roomid,proto3" json:"roomid,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetAliasInChatRoomRequest) Reset() {
	*x = GetAliasInChatRoomRequest{}
	mi := &file_proto_wechat_rpc_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetAliasInChatRoomRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAliasInChatRoomRequest) ProtoMessage() {}

func (x *GetAliasInChatRoomRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_wechat_rpc_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAliasInChatRoomRequest.ProtoReflect.Descriptor instead.
func (*GetAliasInChatRoomRequest) Descriptor() ([]byte, []int) {
	return file_proto_wechat_rpc_proto_rawDescGZIP(), []int{25}
}

func (x *GetAliasInChatRoomRequest) GetWxid() string {
	if x != nil {
		return x.Wxid
	}
	return ""
}

func (x *GetAliasInChatRoomRequest) GetRoomid() string {
	if x != nil {
		return x.Roomid
	}
	return ""
}

// 群成员
type ChatRoomMembers struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Members       map[string]string      `protobuf:"bytes,1,rep,name=members,proto3" json:"members,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ChatRoomMembers) Reset() {
	*x = ChatRoomMembers{}
	mi := &file_proto_wechat_rpc_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChatRoomMembers) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChatRoomMembers) ProtoMessage() {}

func (x *ChatRoomMembers) ProtoReflect() protoreflect.Message {
	mi := &file_proto_wechat_rpc_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChatRoomMembers.ProtoReflect.Descriptor instead.
func (*ChatRoomMembers) Descriptor() ([]byte, []int) {
	return file_proto_wechat_rpc_proto_rawDescGZIP(), []int{26}
}

func (x *ChatRoomMembers) GetMembers() map[string]string {
	if x != nil {
		return x.Members
	}
	return nil
}

// 字符串响应
type StringResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Result        string                 `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StringResponse) Reset() {
	*x = StringResponse{}
	mi := &file_proto_wechat_rpc_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StringResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StringResponse) ProtoMessage() {}

func (x *StringResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_wechat_rpc_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StringResponse.ProtoReflect.Descriptor instead.
func (*StringResponse) Descriptor() ([]byte, []int) {
	return file_proto_wechat_rpc_proto_rawDescGZIP(), []int{27}
}

func (x *StringResponse) GetResult() string {
	if x != nil {
		return x.Result
	}
	return ""
}

// 整数响应
type IntResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Status        int32                  `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *IntResponse) Reset() {
	*x = IntResponse{}
	mi := &file_proto_wechat_rpc_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IntResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IntResponse) ProtoMessage() {}

func (x *IntResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_wechat_rpc_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IntResponse.ProtoReflect.Descriptor instead.
func (*IntResponse) Descriptor() ([]byte, []int) {
	return file_proto_wechat_rpc_proto_rawDescGZIP(), []int{28}
}

func (x *IntResponse) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

// 布尔响应
type BoolResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Status        bool                   `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BoolResponse) Reset() {
	*x = BoolResponse{}
	mi := &file_proto_wechat_rpc_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BoolResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BoolResponse) ProtoMessage() {}

func (x *BoolResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_wechat_rpc_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BoolResponse.ProtoReflect.Descriptor instead.
func (*BoolResponse) Descriptor() ([]byte, []int) {
	return file_proto_wechat_rpc_proto_rawDescGZIP(), []int{29}
}

func (x *BoolResponse) GetStatus() bool {
	if x != nil {
		return x.Status
	}
	return false
}

var File_proto_wechat_rpc_proto protoreflect.FileDescriptor

var file_proto_wechat_rpc_proto_rawDesc = []byte{
	0x0a, 0x16, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x77, 0x65, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x72,
	0x70, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0a, 0x77, 0x65, 0x63, 0x68, 0x61, 0x74,
	0x5f, 0x72, 0x70, 0x63, 0x22, 0xec, 0x01, 0x0a, 0x05, 0x57, 0x78, 0x4d, 0x73, 0x67, 0x12, 0x27,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x77,
	0x65, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x4d, 0x73, 0x67, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x78, 0x6d, 0x6c, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x78, 0x6d, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x6e,
	0x64, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x65, 0x6e, 0x64, 0x65,
	0x72, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x6f, 0x6f, 0x6d, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x72, 0x6f, 0x6f, 0x6d, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x78, 0x74,
	0x72, 0x61, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x12,
	0x0e, 0x0a, 0x02, 0x74, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x74, 0x73, 0x12,
	0x12, 0x0a, 0x04, 0x73, 0x69, 0x67, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73,
	0x69, 0x67, 0x6e, 0x22, 0x60, 0x0a, 0x0a, 0x52, 0x70, 0x63, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x77, 0x78, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x77, 0x78, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x67,
	0x65, 0x6e, 0x64, 0x65, 0x72, 0x22, 0x07, 0x0a, 0x05, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x1f,
	0x0a, 0x07, 0x44, 0x62, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x61, 0x6d,
	0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x22,
	0x2f, 0x0a, 0x07, 0x44, 0x62, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x10,
	0x0a, 0x03, 0x73, 0x71, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x73, 0x71, 0x6c,
	0x22, 0x37, 0x0a, 0x08, 0x44, 0x62, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x12, 0x2b, 0x0a, 0x06,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x77,
	0x65, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x44, 0x62, 0x54, 0x61, 0x62, 0x6c,
	0x65, 0x52, 0x06, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x22, 0x35, 0x0a, 0x07, 0x44, 0x62, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x22, 0x34, 0x0a, 0x05, 0x44, 0x62, 0x52, 0x6f, 0x77, 0x12, 0x2b, 0x0a, 0x06, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x77, 0x65, 0x63, 0x68,
	0x61, 0x74, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x44, 0x62, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x06,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x22, 0x2f, 0x0a, 0x06, 0x44, 0x62, 0x52, 0x6f, 0x77, 0x73,
	0x12, 0x25, 0x0a, 0x04, 0x72, 0x6f, 0x77, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11,
	0x2e, 0x77, 0x65, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x44, 0x62, 0x52, 0x6f,
	0x77, 0x52, 0x04, 0x72, 0x6f, 0x77, 0x73, 0x22, 0x2b, 0x0a, 0x07, 0x44, 0x62, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x64, 0x62, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x64, 0x62, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x71, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x73, 0x71, 0x6c, 0x22, 0x1d, 0x0a, 0x07, 0x50, 0x61, 0x74, 0x68, 0x4d, 0x73, 0x67, 0x12,
	0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70,
	0x61, 0x74, 0x68, 0x22, 0x4d, 0x0a, 0x07, 0x54, 0x65, 0x78, 0x74, 0x4d, 0x73, 0x67, 0x12, 0x10,
	0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67,
	0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05,
	0x61, 0x74, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x74, 0x65,
	0x72, 0x73, 0x22, 0x5e, 0x0a, 0x06, 0x58, 0x6d, 0x6c, 0x4d, 0x73, 0x67, 0x12, 0x1a, 0x0a, 0x08,
	0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x78, 0x6d, 0x6c, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x78, 0x6d, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61,
	0x74, 0x68, 0x22, 0xb0, 0x01, 0x0a, 0x08, 0x52, 0x69, 0x63, 0x68, 0x54, 0x65, 0x78, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x14, 0x0a,
	0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69,
	0x74, 0x6c, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x69, 0x67, 0x65, 0x73, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x69, 0x67, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x75,
	0x72, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x1a, 0x0a,
	0x08, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x75, 0x72, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x74, 0x68, 0x75, 0x6d, 0x62, 0x75, 0x72, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x63,
	0x65, 0x69, 0x76, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x63,
	0x65, 0x69, 0x76, 0x65, 0x72, 0x22, 0x34, 0x0a, 0x06, 0x50, 0x61, 0x74, 0x4d, 0x73, 0x67, 0x12,
	0x16, 0x0a, 0x06, 0x72, 0x6f, 0x6f, 0x6d, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x72, 0x6f, 0x6f, 0x6d, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x77, 0x78, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x77, 0x78, 0x69, 0x64, 0x22, 0x3f, 0x0a, 0x11, 0x46,
	0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x4d, 0x73, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x22, 0x2d, 0x0a, 0x07,
	0x44, 0x65, 0x63, 0x50, 0x61, 0x74, 0x68, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x72, 0x63, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x73, 0x72, 0x63, 0x12, 0x10, 0x0a, 0x03, 0x64, 0x69, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x64, 0x69, 0x72, 0x22, 0x38, 0x0a, 0x06, 0x4f,
	0x63, 0x72, 0x4d, 0x73, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x12, 0x18, 0x0a, 0x07, 0x74,
	0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x74, 0x69,
	0x6d, 0x65, 0x6f, 0x75, 0x74, 0x22, 0x3a, 0x0a, 0x0a, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x4d,
	0x67, 0x6d, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x6f, 0x6f, 0x6d, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x6f, 0x6f, 0x6d, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x77,
	0x78, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x77, 0x78, 0x69, 0x64,
	0x73, 0x22, 0x44, 0x0a, 0x0c, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x76, 0x33, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x76,
	0x33, 0x12, 0x0e, 0x0a, 0x02, 0x76, 0x34, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x76,
	0x34, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x22, 0x64, 0x0a, 0x08, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x77, 0x78, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x77, 0x78, 0x69, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x65, 0x72, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x65, 0x72, 0x69, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x69, 0x64, 0x22, 0x23, 0x0a,
	0x11, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x50, 0x79, 0x71, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02,
	0x69, 0x64, 0x22, 0x53, 0x0a, 0x15, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x41, 0x74,
	0x74, 0x61, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74,
	0x68, 0x75, 0x6d, 0x62, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x68, 0x75, 0x6d,
	0x62, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x22, 0x61, 0x0a, 0x0d, 0x44, 0x6f, 0x77, 0x6e, 0x6c,
	0x6f, 0x61, 0x64, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72,
	0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x12, 0x10,
	0x0a, 0x03, 0x64, 0x69, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x64, 0x69, 0x72,
	0x12, 0x18, 0x0a, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x22, 0x50, 0x0a, 0x12, 0x47, 0x65,
	0x74, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x4d, 0x73, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x10, 0x0a, 0x03, 0x64, 0x69, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x64,
	0x69, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x22, 0x47, 0x0a, 0x19,
	0x47, 0x65, 0x74, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x49, 0x6e, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f,
	0x6f, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x77, 0x78, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x77, 0x78, 0x69, 0x64, 0x12, 0x16, 0x0a,
	0x06, 0x72, 0x6f, 0x6f, 0x6d, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72,
	0x6f, 0x6f, 0x6d, 0x69, 0x64, 0x22, 0x91, 0x01, 0x0a, 0x0f, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f,
	0x6f, 0x6d, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x12, 0x42, 0x0a, 0x07, 0x6d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x77, 0x65, 0x63,
	0x68, 0x61, 0x74, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d,
	0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x1a, 0x3a, 0x0a,
	0x0c, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x28, 0x0a, 0x0e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x22, 0x25, 0x0a, 0x0b, 0x49, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x26, 0x0a, 0x0c, 0x42, 0x6f,
	0x6f, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x2a, 0x8c, 0x01, 0x0a, 0x07, 0x4d, 0x73, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0e,
	0x0a, 0x0a, 0x4d, 0x54, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0b,
	0x0a, 0x07, 0x4d, 0x54, 0x5f, 0x54, 0x45, 0x58, 0x54, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x4d,
	0x54, 0x5f, 0x49, 0x4d, 0x41, 0x47, 0x45, 0x10, 0x03, 0x12, 0x0c, 0x0a, 0x08, 0x4d, 0x54, 0x5f,
	0x56, 0x4f, 0x49, 0x43, 0x45, 0x10, 0x22, 0x12, 0x0e, 0x0a, 0x0a, 0x4d, 0x54, 0x5f, 0x45, 0x4d,
	0x4f, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x2f, 0x12, 0x0b, 0x0a, 0x07, 0x4d, 0x54, 0x5f, 0x4c, 0x49,
	0x4e, 0x4b, 0x10, 0x31, 0x12, 0x0c, 0x0a, 0x07, 0x4d, 0x54, 0x5f, 0x46, 0x49, 0x4c, 0x45, 0x10,
	0xe8, 0x07, 0x12, 0x0b, 0x0a, 0x06, 0x4d, 0x54, 0x5f, 0x53, 0x59, 0x53, 0x10, 0x90, 0x4e, 0x12,
	0x10, 0x0a, 0x0b, 0x4d, 0x54, 0x5f, 0x52, 0x45, 0x43, 0x41, 0x4c, 0x4c, 0x45, 0x44, 0x10, 0x92,
	0x4e, 0x32, 0xca, 0x13, 0x0a, 0x0e, 0x57, 0x65, 0x43, 0x68, 0x61, 0x74, 0x46, 0x65, 0x72, 0x72,
	0x79, 0x52, 0x50, 0x43, 0x12, 0x38, 0x0a, 0x07, 0x49, 0x73, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x12,
	0x11, 0x2e, 0x77, 0x65, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x1a, 0x18, 0x2e, 0x77, 0x65, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x72, 0x70, 0x63, 0x2e,
	0x42, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x3e,
	0x0a, 0x0b, 0x47, 0x65, 0x74, 0x53, 0x65, 0x6c, 0x66, 0x57, 0x78, 0x69, 0x64, 0x12, 0x11, 0x2e,
	0x77, 0x65, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x1a, 0x1a, 0x2e, 0x77, 0x65, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x37,
	0x0a, 0x0b, 0x47, 0x65, 0x74, 0x4d, 0x73, 0x67, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x11, 0x2e,
	0x77, 0x65, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x1a, 0x11, 0x2e, 0x77, 0x65, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x57, 0x78,
	0x4d, 0x73, 0x67, 0x22, 0x00, 0x30, 0x01, 0x12, 0x3c, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x43, 0x6f,
	0x6e, 0x74, 0x61, 0x63, 0x74, 0x73, 0x12, 0x11, 0x2e, 0x77, 0x65, 0x63, 0x68, 0x61, 0x74, 0x5f,
	0x72, 0x70, 0x63, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x16, 0x2e, 0x77, 0x65, 0x63, 0x68,
	0x61, 0x74, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x70, 0x63, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63,
	0x74, 0x22, 0x00, 0x30, 0x01, 0x12, 0x36, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x44, 0x62, 0x4e, 0x61,
	0x6d, 0x65, 0x73, 0x12, 0x11, 0x2e, 0x77, 0x65, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x72, 0x70, 0x63,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x13, 0x2e, 0x77, 0x65, 0x63, 0x68, 0x61, 0x74, 0x5f,
	0x72, 0x70, 0x63, 0x2e, 0x44, 0x62, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x22, 0x00, 0x12, 0x3a, 0x0a,
	0x0b, 0x47, 0x65, 0x74, 0x44, 0x62, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x12, 0x13, 0x2e, 0x77,
	0x65, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x44, 0x62, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x1a, 0x14, 0x2e, 0x77, 0x65, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x44,
	0x62, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x22, 0x00, 0x12, 0x3a, 0x0a, 0x0b, 0x47, 0x65, 0x74,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x11, 0x2e, 0x77, 0x65, 0x63, 0x68, 0x61,
	0x74, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x16, 0x2e, 0x77, 0x65,
	0x63, 0x68, 0x61, 0x74, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x70, 0x63, 0x43, 0x6f, 0x6e, 0x74,
	0x61, 0x63, 0x74, 0x22, 0x00, 0x12, 0x4b, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x41, 0x75, 0x64, 0x69,
	0x6f, 0x4d, 0x73, 0x67, 0x12, 0x1e, 0x2e, 0x77, 0x65, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x72, 0x70,
	0x63, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x4d, 0x73, 0x67, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x77, 0x65, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x72, 0x70,
	0x63, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x3a, 0x0a, 0x08, 0x53, 0x65, 0x6e, 0x64, 0x54, 0x65, 0x78, 0x74, 0x12, 0x13,
	0x2e, 0x77, 0x65, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x54, 0x65, 0x78, 0x74,
	0x4d, 0x73, 0x67, 0x1a, 0x17, 0x2e, 0x77, 0x65, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x72, 0x70, 0x63,
	0x2e, 0x49, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x3b,
	0x0a, 0x09, 0x53, 0x65, 0x6e, 0x64, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x13, 0x2e, 0x77, 0x65,
	0x63, 0x68, 0x61, 0x74, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x61, 0x74, 0x68, 0x4d, 0x73, 0x67,
	0x1a, 0x17, 0x2e, 0x77, 0x65, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x49, 0x6e,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x3a, 0x0a, 0x08, 0x53,
	0x65, 0x6e, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x13, 0x2e, 0x77, 0x65, 0x63, 0x68, 0x61, 0x74,
	0x5f, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x61, 0x74, 0x68, 0x4d, 0x73, 0x67, 0x1a, 0x17, 0x2e, 0x77,
	0x65, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x49, 0x6e, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x38, 0x0a, 0x07, 0x53, 0x65, 0x6e, 0x64, 0x58,
	0x6d, 0x6c, 0x12, 0x12, 0x2e, 0x77, 0x65, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x72, 0x70, 0x63, 0x2e,
	0x58, 0x6d, 0x6c, 0x4d, 0x73, 0x67, 0x1a, 0x17, 0x2e, 0x77, 0x65, 0x63, 0x68, 0x61, 0x74, 0x5f,
	0x72, 0x70, 0x63, 0x2e, 0x49, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x3d, 0x0a, 0x0b, 0x53, 0x65, 0x6e, 0x64, 0x45, 0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x13, 0x2e, 0x77, 0x65, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x61,
	0x74, 0x68, 0x4d, 0x73, 0x67, 0x1a, 0x17, 0x2e, 0x77, 0x65, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x72,
	0x70, 0x63, 0x2e, 0x49, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x3f, 0x0a, 0x0c, 0x53, 0x65, 0x6e, 0x64, 0x52, 0x69, 0x63, 0x68, 0x54, 0x65, 0x78, 0x74,
	0x12, 0x14, 0x2e, 0x77, 0x65, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x69,
	0x63, 0x68, 0x54, 0x65, 0x78, 0x74, 0x1a, 0x17, 0x2e, 0x77, 0x65, 0x63, 0x68, 0x61, 0x74, 0x5f,
	0x72, 0x70, 0x63, 0x2e, 0x49, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x3b, 0x0a, 0x0a, 0x53, 0x65, 0x6e, 0x64, 0x50, 0x61, 0x74, 0x4d, 0x73, 0x67, 0x12,
	0x12, 0x2e, 0x77, 0x65, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x61, 0x74,
	0x4d, 0x73, 0x67, 0x1a, 0x17, 0x2e, 0x77, 0x65, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x72, 0x70, 0x63,
	0x2e, 0x49, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x46,
	0x0a, 0x0a, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x4d, 0x73, 0x67, 0x12, 0x1d, 0x2e, 0x77,
	0x65, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72,
	0x64, 0x4d, 0x73, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x77, 0x65,
	0x63, 0x68, 0x61, 0x74, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x49, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x3e, 0x0a, 0x0d, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x52, 0x65, 0x63, 0x76, 0x4d, 0x73, 0x67, 0x12, 0x11, 0x2e, 0x77, 0x65, 0x63, 0x68, 0x61, 0x74,
	0x5f, 0x72, 0x70, 0x63, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x18, 0x2e, 0x77, 0x65, 0x63,
	0x68, 0x61, 0x74, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x3e, 0x0a, 0x0e, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c,
	0x65, 0x52, 0x65, 0x63, 0x76, 0x4d, 0x73, 0x67, 0x12, 0x11, 0x2e, 0x77, 0x65, 0x63, 0x68, 0x61,
	0x74, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x17, 0x2e, 0x77, 0x65,
	0x63, 0x68, 0x61, 0x74, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x49, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x38, 0x0a, 0x0b, 0x45, 0x78, 0x65, 0x63, 0x44, 0x62,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x13, 0x2e, 0x77, 0x65, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x72,
	0x70, 0x63, 0x2e, 0x44, 0x62, 0x51, 0x75, 0x65, 0x72, 0x79, 0x1a, 0x12, 0x2e, 0x77, 0x65, 0x63,
	0x68, 0x61, 0x74, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x44, 0x62, 0x52, 0x6f, 0x77, 0x73, 0x22, 0x00,
	0x12, 0x43, 0x0a, 0x0c, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64,
	0x12, 0x18, 0x2e, 0x77, 0x65, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x56, 0x65,
	0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x17, 0x2e, 0x77, 0x65, 0x63,
	0x68, 0x61, 0x74, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x49, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x42, 0x0a, 0x0f, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x12, 0x14, 0x2e, 0x77, 0x65, 0x63, 0x68, 0x61,
	0x74, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x1a, 0x17,
	0x2e, 0x77, 0x65, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x49, 0x6e, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x46, 0x0a, 0x0a, 0x52, 0x65, 0x66,
	0x72, 0x65, 0x73, 0x68, 0x50, 0x79, 0x71, 0x12, 0x1d, 0x2e, 0x77, 0x65, 0x63, 0x68, 0x61, 0x74,
	0x5f, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x50, 0x79, 0x71, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x77, 0x65, 0x63, 0x68, 0x61, 0x74, 0x5f,
	0x72, 0x70, 0x63, 0x2e, 0x49, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x4e, 0x0a, 0x0e, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x41, 0x74, 0x74,
	0x61, 0x63, 0x68, 0x12, 0x21, 0x2e, 0x77, 0x65, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x72, 0x70, 0x63,
	0x2e, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x77, 0x65, 0x63, 0x68, 0x61, 0x74, 0x5f,
	0x72, 0x70, 0x63, 0x2e, 0x49, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x45, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x79, 0x57, 0x78,
	0x69, 0x64, 0x12, 0x1a, 0x2e, 0x77, 0x65, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x72, 0x70, 0x63, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x1a, 0x16,
	0x2e, 0x77, 0x65, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x70, 0x63, 0x43,
	0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x22, 0x00, 0x12, 0x3f, 0x0a, 0x09, 0x52, 0x65, 0x76, 0x6f,
	0x6b, 0x65, 0x4d, 0x73, 0x67, 0x12, 0x17, 0x2e, 0x77, 0x65, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x72,
	0x70, 0x63, 0x2e, 0x49, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x1a, 0x17,
	0x2e, 0x77, 0x65, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x49, 0x6e, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x40, 0x0a, 0x0d, 0x52, 0x65, 0x66,
	0x72, 0x65, 0x73, 0x68, 0x51, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x11, 0x2e, 0x77, 0x65, 0x63,
	0x68, 0x61, 0x74, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x1a, 0x2e,
	0x77, 0x65, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x41, 0x0a, 0x0c, 0x44,
	0x65, 0x63, 0x72, 0x79, 0x70, 0x74, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x13, 0x2e, 0x77, 0x65,
	0x63, 0x68, 0x61, 0x74, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x44, 0x65, 0x63, 0x50, 0x61, 0x74, 0x68,
	0x1a, 0x1a, 0x2e, 0x77, 0x65, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x3b,
	0x0a, 0x07, 0x45, 0x78, 0x65, 0x63, 0x4f, 0x63, 0x72, 0x12, 0x12, 0x2e, 0x77, 0x65, 0x63, 0x68,
	0x61, 0x74, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x4f, 0x63, 0x72, 0x4d, 0x73, 0x67, 0x1a, 0x1a, 0x2e,
	0x77, 0x65, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x43, 0x0a, 0x0e, 0x41,
	0x64, 0x64, 0x52, 0x6f, 0x6f, 0x6d, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x12, 0x16, 0x2e,
	0x77, 0x65, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x4d, 0x67, 0x6d, 0x74, 0x1a, 0x17, 0x2e, 0x77, 0x65, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x72,
	0x70, 0x63, 0x2e, 0x49, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x43, 0x0a, 0x0e, 0x44, 0x65, 0x6c, 0x52, 0x6f, 0x6f, 0x6d, 0x4d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x73, 0x12, 0x16, 0x2e, 0x77, 0x65, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x72, 0x70, 0x63, 0x2e,
	0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x4d, 0x67, 0x6d, 0x74, 0x1a, 0x17, 0x2e, 0x77, 0x65, 0x63,
	0x68, 0x61, 0x74, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x49, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x43, 0x0a, 0x0e, 0x49, 0x6e, 0x76, 0x52, 0x6f, 0x6f, 0x6d,
	0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x12, 0x16, 0x2e, 0x77, 0x65, 0x63, 0x68, 0x61, 0x74,
	0x5f, 0x72, 0x70, 0x63, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x4d, 0x67, 0x6d, 0x74, 0x1a,
	0x17, 0x2e, 0x77, 0x65, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x49, 0x6e, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x59, 0x0a, 0x12, 0x47, 0x65,
	0x74, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x49, 0x6e, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d,
	0x12, 0x25, 0x2e, 0x77, 0x65, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x65,
	0x74, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x49, 0x6e, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x77, 0x65, 0x63, 0x68, 0x61, 0x74,
	0x5f, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4f, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x74,
	0x52, 0x6f, 0x6f, 0x6d, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x12, 0x1a, 0x2e, 0x77, 0x65,
	0x63, 0x68, 0x61, 0x74, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x1a, 0x1b, 0x2e, 0x77, 0x65, 0x63, 0x68, 0x61, 0x74,
	0x5f, 0x72, 0x70, 0x63, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x52, 0x6f, 0x6f, 0x6d, 0x4d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x73, 0x22, 0x00, 0x12, 0x3b, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x46, 0x72, 0x69,
	0x65, 0x6e, 0x64, 0x73, 0x12, 0x11, 0x2e, 0x77, 0x65, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x72, 0x70,
	0x63, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x16, 0x2e, 0x77, 0x65, 0x63, 0x68, 0x61, 0x74,
	0x5f, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x70, 0x63, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x22,
	0x00, 0x30, 0x01, 0x12, 0x40, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x4f, 0x63, 0x72, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x12, 0x12, 0x2e, 0x77, 0x65, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x72, 0x70, 0x63,
	0x2e, 0x4f, 0x63, 0x72, 0x4d, 0x73, 0x67, 0x1a, 0x1a, 0x2e, 0x77, 0x65, 0x63, 0x68, 0x61, 0x74,
	0x5f, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x3c, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x51, 0x72, 0x63, 0x6f,
	0x64, 0x65, 0x12, 0x11, 0x2e, 0x77, 0x65, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x72, 0x70, 0x63, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x1a, 0x2e, 0x77, 0x65, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x72,
	0x70, 0x63, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x38, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x73,
	0x12, 0x13, 0x2e, 0x77, 0x65, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x44, 0x62,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x1a, 0x14, 0x2e, 0x77, 0x65, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x72,
	0x70, 0x63, 0x2e, 0x44, 0x62, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x22, 0x00, 0x12, 0x3f, 0x0a,
	0x0e, 0x49, 0x73, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x69, 0x6e, 0x67, 0x4d, 0x73, 0x67, 0x12,
	0x11, 0x2e, 0x77, 0x65, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x72, 0x70, 0x63, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x1a, 0x18, 0x2e, 0x77, 0x65, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x72, 0x70, 0x63, 0x2e,
	0x42, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x0e,
	0x5a, 0x0c, 0x2e, 0x3b, 0x77, 0x65, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x72, 0x70, 0x63, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proto_wechat_rpc_proto_rawDescOnce sync.Once
	file_proto_wechat_rpc_proto_rawDescData = file_proto_wechat_rpc_proto_rawDesc
)

func file_proto_wechat_rpc_proto_rawDescGZIP() []byte {
	file_proto_wechat_rpc_proto_rawDescOnce.Do(func() {
		file_proto_wechat_rpc_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_wechat_rpc_proto_rawDescData)
	})
	return file_proto_wechat_rpc_proto_rawDescData
}

var file_proto_wechat_rpc_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_proto_wechat_rpc_proto_msgTypes = make([]protoimpl.MessageInfo, 31)
var file_proto_wechat_rpc_proto_goTypes = []any{
	(MsgType)(0),                      // 0: wechat_rpc.MsgType
	(*WxMsg)(nil),                     // 1: wechat_rpc.WxMsg
	(*RpcContact)(nil),                // 2: wechat_rpc.RpcContact
	(*Empty)(nil),                     // 3: wechat_rpc.Empty
	(*DbNames)(nil),                   // 4: wechat_rpc.DbNames
	(*DbTable)(nil),                   // 5: wechat_rpc.DbTable
	(*DbTables)(nil),                  // 6: wechat_rpc.DbTables
	(*DbField)(nil),                   // 7: wechat_rpc.DbField
	(*DbRow)(nil),                     // 8: wechat_rpc.DbRow
	(*DbRows)(nil),                    // 9: wechat_rpc.DbRows
	(*DbQuery)(nil),                   // 10: wechat_rpc.DbQuery
	(*PathMsg)(nil),                   // 11: wechat_rpc.PathMsg
	(*TextMsg)(nil),                   // 12: wechat_rpc.TextMsg
	(*XmlMsg)(nil),                    // 13: wechat_rpc.XmlMsg
	(*RichText)(nil),                  // 14: wechat_rpc.RichText
	(*PatMsg)(nil),                    // 15: wechat_rpc.PatMsg
	(*ForwardMsgRequest)(nil),         // 16: wechat_rpc.ForwardMsgRequest
	(*DecPath)(nil),                   // 17: wechat_rpc.DecPath
	(*OcrMsg)(nil),                    // 18: wechat_rpc.OcrMsg
	(*MemberMgmt)(nil),                // 19: wechat_rpc.MemberMgmt
	(*Verification)(nil),              // 20: wechat_rpc.Verification
	(*Transfer)(nil),                  // 21: wechat_rpc.Transfer
	(*RefreshPyqRequest)(nil),         // 22: wechat_rpc.RefreshPyqRequest
	(*DownloadAttachRequest)(nil),     // 23: wechat_rpc.DownloadAttachRequest
	(*DownloadImage)(nil),             // 24: wechat_rpc.DownloadImage
	(*GetAudioMsgRequest)(nil),        // 25: wechat_rpc.GetAudioMsgRequest
	(*GetAliasInChatRoomRequest)(nil), // 26: wechat_rpc.GetAliasInChatRoomRequest
	(*ChatRoomMembers)(nil),           // 27: wechat_rpc.ChatRoomMembers
	(*StringResponse)(nil),            // 28: wechat_rpc.StringResponse
	(*IntResponse)(nil),               // 29: wechat_rpc.IntResponse
	(*BoolResponse)(nil),              // 30: wechat_rpc.BoolResponse
	nil,                               // 31: wechat_rpc.ChatRoomMembers.MembersEntry
}
var file_proto_wechat_rpc_proto_depIdxs = []int32{
	0,  // 0: wechat_rpc.WxMsg.type:type_name -> wechat_rpc.MsgType
	5,  // 1: wechat_rpc.DbTables.tables:type_name -> wechat_rpc.DbTable
	7,  // 2: wechat_rpc.DbRow.fields:type_name -> wechat_rpc.DbField
	8,  // 3: wechat_rpc.DbRows.rows:type_name -> wechat_rpc.DbRow
	31, // 4: wechat_rpc.ChatRoomMembers.members:type_name -> wechat_rpc.ChatRoomMembers.MembersEntry
	3,  // 5: wechat_rpc.WeChatFerryRPC.IsLogin:input_type -> wechat_rpc.Empty
	3,  // 6: wechat_rpc.WeChatFerryRPC.GetSelfWxid:input_type -> wechat_rpc.Empty
	3,  // 7: wechat_rpc.WeChatFerryRPC.GetMsgTypes:input_type -> wechat_rpc.Empty
	3,  // 8: wechat_rpc.WeChatFerryRPC.GetContacts:input_type -> wechat_rpc.Empty
	3,  // 9: wechat_rpc.WeChatFerryRPC.GetDbNames:input_type -> wechat_rpc.Empty
	10, // 10: wechat_rpc.WeChatFerryRPC.GetDbTables:input_type -> wechat_rpc.DbQuery
	3,  // 11: wechat_rpc.WeChatFerryRPC.GetUserInfo:input_type -> wechat_rpc.Empty
	25, // 12: wechat_rpc.WeChatFerryRPC.GetAudioMsg:input_type -> wechat_rpc.GetAudioMsgRequest
	12, // 13: wechat_rpc.WeChatFerryRPC.SendText:input_type -> wechat_rpc.TextMsg
	11, // 14: wechat_rpc.WeChatFerryRPC.SendImage:input_type -> wechat_rpc.PathMsg
	11, // 15: wechat_rpc.WeChatFerryRPC.SendFile:input_type -> wechat_rpc.PathMsg
	13, // 16: wechat_rpc.WeChatFerryRPC.SendXml:input_type -> wechat_rpc.XmlMsg
	11, // 17: wechat_rpc.WeChatFerryRPC.SendEmotion:input_type -> wechat_rpc.PathMsg
	14, // 18: wechat_rpc.WeChatFerryRPC.SendRichText:input_type -> wechat_rpc.RichText
	15, // 19: wechat_rpc.WeChatFerryRPC.SendPatMsg:input_type -> wechat_rpc.PatMsg
	16, // 20: wechat_rpc.WeChatFerryRPC.ForwardMsg:input_type -> wechat_rpc.ForwardMsgRequest
	3,  // 21: wechat_rpc.WeChatFerryRPC.EnableRecvMsg:input_type -> wechat_rpc.Empty
	3,  // 22: wechat_rpc.WeChatFerryRPC.DisableRecvMsg:input_type -> wechat_rpc.Empty
	10, // 23: wechat_rpc.WeChatFerryRPC.ExecDbQuery:input_type -> wechat_rpc.DbQuery
	20, // 24: wechat_rpc.WeChatFerryRPC.AcceptFriend:input_type -> wechat_rpc.Verification
	21, // 25: wechat_rpc.WeChatFerryRPC.ReceiveTransfer:input_type -> wechat_rpc.Transfer
	22, // 26: wechat_rpc.WeChatFerryRPC.RefreshPyq:input_type -> wechat_rpc.RefreshPyqRequest
	23, // 27: wechat_rpc.WeChatFerryRPC.DownloadAttach:input_type -> wechat_rpc.DownloadAttachRequest
	28, // 28: wechat_rpc.WeChatFerryRPC.GetInfoByWxid:input_type -> wechat_rpc.StringResponse
	29, // 29: wechat_rpc.WeChatFerryRPC.RevokeMsg:input_type -> wechat_rpc.IntResponse
	3,  // 30: wechat_rpc.WeChatFerryRPC.RefreshQrcode:input_type -> wechat_rpc.Empty
	17, // 31: wechat_rpc.WeChatFerryRPC.DecryptImage:input_type -> wechat_rpc.DecPath
	18, // 32: wechat_rpc.WeChatFerryRPC.ExecOcr:input_type -> wechat_rpc.OcrMsg
	19, // 33: wechat_rpc.WeChatFerryRPC.AddRoomMembers:input_type -> wechat_rpc.MemberMgmt
	19, // 34: wechat_rpc.WeChatFerryRPC.DelRoomMembers:input_type -> wechat_rpc.MemberMgmt
	19, // 35: wechat_rpc.WeChatFerryRPC.InvRoomMembers:input_type -> wechat_rpc.MemberMgmt
	26, // 36: wechat_rpc.WeChatFerryRPC.GetAliasInChatRoom:input_type -> wechat_rpc.GetAliasInChatRoomRequest
	28, // 37: wechat_rpc.WeChatFerryRPC.GetChatRoomMembers:input_type -> wechat_rpc.StringResponse
	3,  // 38: wechat_rpc.WeChatFerryRPC.GetFriends:input_type -> wechat_rpc.Empty
	18, // 39: wechat_rpc.WeChatFerryRPC.GetOcrResult:input_type -> wechat_rpc.OcrMsg
	3,  // 40: wechat_rpc.WeChatFerryRPC.GetQrcode:input_type -> wechat_rpc.Empty
	10, // 41: wechat_rpc.WeChatFerryRPC.GetTables:input_type -> wechat_rpc.DbQuery
	3,  // 42: wechat_rpc.WeChatFerryRPC.IsReceivingMsg:input_type -> wechat_rpc.Empty
	30, // 43: wechat_rpc.WeChatFerryRPC.IsLogin:output_type -> wechat_rpc.BoolResponse
	28, // 44: wechat_rpc.WeChatFerryRPC.GetSelfWxid:output_type -> wechat_rpc.StringResponse
	1,  // 45: wechat_rpc.WeChatFerryRPC.GetMsgTypes:output_type -> wechat_rpc.WxMsg
	2,  // 46: wechat_rpc.WeChatFerryRPC.GetContacts:output_type -> wechat_rpc.RpcContact
	4,  // 47: wechat_rpc.WeChatFerryRPC.GetDbNames:output_type -> wechat_rpc.DbNames
	6,  // 48: wechat_rpc.WeChatFerryRPC.GetDbTables:output_type -> wechat_rpc.DbTables
	2,  // 49: wechat_rpc.WeChatFerryRPC.GetUserInfo:output_type -> wechat_rpc.RpcContact
	28, // 50: wechat_rpc.WeChatFerryRPC.GetAudioMsg:output_type -> wechat_rpc.StringResponse
	29, // 51: wechat_rpc.WeChatFerryRPC.SendText:output_type -> wechat_rpc.IntResponse
	29, // 52: wechat_rpc.WeChatFerryRPC.SendImage:output_type -> wechat_rpc.IntResponse
	29, // 53: wechat_rpc.WeChatFerryRPC.SendFile:output_type -> wechat_rpc.IntResponse
	29, // 54: wechat_rpc.WeChatFerryRPC.SendXml:output_type -> wechat_rpc.IntResponse
	29, // 55: wechat_rpc.WeChatFerryRPC.SendEmotion:output_type -> wechat_rpc.IntResponse
	29, // 56: wechat_rpc.WeChatFerryRPC.SendRichText:output_type -> wechat_rpc.IntResponse
	29, // 57: wechat_rpc.WeChatFerryRPC.SendPatMsg:output_type -> wechat_rpc.IntResponse
	29, // 58: wechat_rpc.WeChatFerryRPC.ForwardMsg:output_type -> wechat_rpc.IntResponse
	30, // 59: wechat_rpc.WeChatFerryRPC.EnableRecvMsg:output_type -> wechat_rpc.BoolResponse
	29, // 60: wechat_rpc.WeChatFerryRPC.DisableRecvMsg:output_type -> wechat_rpc.IntResponse
	9,  // 61: wechat_rpc.WeChatFerryRPC.ExecDbQuery:output_type -> wechat_rpc.DbRows
	29, // 62: wechat_rpc.WeChatFerryRPC.AcceptFriend:output_type -> wechat_rpc.IntResponse
	29, // 63: wechat_rpc.WeChatFerryRPC.ReceiveTransfer:output_type -> wechat_rpc.IntResponse
	29, // 64: wechat_rpc.WeChatFerryRPC.RefreshPyq:output_type -> wechat_rpc.IntResponse
	29, // 65: wechat_rpc.WeChatFerryRPC.DownloadAttach:output_type -> wechat_rpc.IntResponse
	2,  // 66: wechat_rpc.WeChatFerryRPC.GetInfoByWxid:output_type -> wechat_rpc.RpcContact
	29, // 67: wechat_rpc.WeChatFerryRPC.RevokeMsg:output_type -> wechat_rpc.IntResponse
	28, // 68: wechat_rpc.WeChatFerryRPC.RefreshQrcode:output_type -> wechat_rpc.StringResponse
	28, // 69: wechat_rpc.WeChatFerryRPC.DecryptImage:output_type -> wechat_rpc.StringResponse
	28, // 70: wechat_rpc.WeChatFerryRPC.ExecOcr:output_type -> wechat_rpc.StringResponse
	29, // 71: wechat_rpc.WeChatFerryRPC.AddRoomMembers:output_type -> wechat_rpc.IntResponse
	29, // 72: wechat_rpc.WeChatFerryRPC.DelRoomMembers:output_type -> wechat_rpc.IntResponse
	29, // 73: wechat_rpc.WeChatFerryRPC.InvRoomMembers:output_type -> wechat_rpc.IntResponse
	28, // 74: wechat_rpc.WeChatFerryRPC.GetAliasInChatRoom:output_type -> wechat_rpc.StringResponse
	27, // 75: wechat_rpc.WeChatFerryRPC.GetChatRoomMembers:output_type -> wechat_rpc.ChatRoomMembers
	2,  // 76: wechat_rpc.WeChatFerryRPC.GetFriends:output_type -> wechat_rpc.RpcContact
	28, // 77: wechat_rpc.WeChatFerryRPC.GetOcrResult:output_type -> wechat_rpc.StringResponse
	28, // 78: wechat_rpc.WeChatFerryRPC.GetQrcode:output_type -> wechat_rpc.StringResponse
	6,  // 79: wechat_rpc.WeChatFerryRPC.GetTables:output_type -> wechat_rpc.DbTables
	30, // 80: wechat_rpc.WeChatFerryRPC.IsReceivingMsg:output_type -> wechat_rpc.BoolResponse
	43, // [43:81] is the sub-list for method output_type
	5,  // [5:43] is the sub-list for method input_type
	5,  // [5:5] is the sub-list for extension type_name
	5,  // [5:5] is the sub-list for extension extendee
	0,  // [0:5] is the sub-list for field type_name
}

func init() { file_proto_wechat_rpc_proto_init() }
func file_proto_wechat_rpc_proto_init() {
	if File_proto_wechat_rpc_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_wechat_rpc_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   31,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_proto_wechat_rpc_proto_goTypes,
		DependencyIndexes: file_proto_wechat_rpc_proto_depIdxs,
		EnumInfos:         file_proto_wechat_rpc_proto_enumTypes,
		MessageInfos:      file_proto_wechat_rpc_proto_msgTypes,
	}.Build()
	File_proto_wechat_rpc_proto = out.File
	file_proto_wechat_rpc_proto_rawDesc = nil
	file_proto_wechat_rpc_proto_goTypes = nil
	file_proto_wechat_rpc_proto_depIdxs = nil
}
