// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: proto/wechat_rpc.proto

package wechat_rpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	WeChatFerryRPC_IsLogin_FullMethodName            = "/wechat_rpc.WeChatFerryRPC/IsLogin"
	WeChatFerryRPC_GetSelfWxid_FullMethodName        = "/wechat_rpc.WeChatFerryRPC/GetSelfWxid"
	WeChatFerryRPC_GetMsgTypes_FullMethodName        = "/wechat_rpc.WeChatFerryRPC/GetMsgTypes"
	WeChatFerryRPC_GetContacts_FullMethodName        = "/wechat_rpc.WeChatFerryRPC/GetContacts"
	WeChatFerryRPC_GetDbNames_FullMethodName         = "/wechat_rpc.WeChatFerryRPC/GetDbNames"
	WeChatFerryRPC_GetDbTables_FullMethodName        = "/wechat_rpc.WeChatFerryRPC/GetDbTables"
	WeChatFerryRPC_GetUserInfo_FullMethodName        = "/wechat_rpc.WeChatFerryRPC/GetUserInfo"
	WeChatFerryRPC_GetAudioMsg_FullMethodName        = "/wechat_rpc.WeChatFerryRPC/GetAudioMsg"
	WeChatFerryRPC_SendText_FullMethodName           = "/wechat_rpc.WeChatFerryRPC/SendText"
	WeChatFerryRPC_SendImage_FullMethodName          = "/wechat_rpc.WeChatFerryRPC/SendImage"
	WeChatFerryRPC_SendFile_FullMethodName           = "/wechat_rpc.WeChatFerryRPC/SendFile"
	WeChatFerryRPC_SendXml_FullMethodName            = "/wechat_rpc.WeChatFerryRPC/SendXml"
	WeChatFerryRPC_SendEmotion_FullMethodName        = "/wechat_rpc.WeChatFerryRPC/SendEmotion"
	WeChatFerryRPC_SendRichText_FullMethodName       = "/wechat_rpc.WeChatFerryRPC/SendRichText"
	WeChatFerryRPC_SendPatMsg_FullMethodName         = "/wechat_rpc.WeChatFerryRPC/SendPatMsg"
	WeChatFerryRPC_ForwardMsg_FullMethodName         = "/wechat_rpc.WeChatFerryRPC/ForwardMsg"
	WeChatFerryRPC_EnableRecvMsg_FullMethodName      = "/wechat_rpc.WeChatFerryRPC/EnableRecvMsg"
	WeChatFerryRPC_DisableRecvMsg_FullMethodName     = "/wechat_rpc.WeChatFerryRPC/DisableRecvMsg"
	WeChatFerryRPC_ExecDbQuery_FullMethodName        = "/wechat_rpc.WeChatFerryRPC/ExecDbQuery"
	WeChatFerryRPC_AcceptFriend_FullMethodName       = "/wechat_rpc.WeChatFerryRPC/AcceptFriend"
	WeChatFerryRPC_ReceiveTransfer_FullMethodName    = "/wechat_rpc.WeChatFerryRPC/ReceiveTransfer"
	WeChatFerryRPC_RefreshPyq_FullMethodName         = "/wechat_rpc.WeChatFerryRPC/RefreshPyq"
	WeChatFerryRPC_DownloadAttach_FullMethodName     = "/wechat_rpc.WeChatFerryRPC/DownloadAttach"
	WeChatFerryRPC_GetInfoByWxid_FullMethodName      = "/wechat_rpc.WeChatFerryRPC/GetInfoByWxid"
	WeChatFerryRPC_RevokeMsg_FullMethodName          = "/wechat_rpc.WeChatFerryRPC/RevokeMsg"
	WeChatFerryRPC_RefreshQrcode_FullMethodName      = "/wechat_rpc.WeChatFerryRPC/RefreshQrcode"
	WeChatFerryRPC_DecryptImage_FullMethodName       = "/wechat_rpc.WeChatFerryRPC/DecryptImage"
	WeChatFerryRPC_ExecOcr_FullMethodName            = "/wechat_rpc.WeChatFerryRPC/ExecOcr"
	WeChatFerryRPC_AddRoomMembers_FullMethodName     = "/wechat_rpc.WeChatFerryRPC/AddRoomMembers"
	WeChatFerryRPC_DelRoomMembers_FullMethodName     = "/wechat_rpc.WeChatFerryRPC/DelRoomMembers"
	WeChatFerryRPC_InvRoomMembers_FullMethodName     = "/wechat_rpc.WeChatFerryRPC/InvRoomMembers"
	WeChatFerryRPC_GetAliasInChatRoom_FullMethodName = "/wechat_rpc.WeChatFerryRPC/GetAliasInChatRoom"
	WeChatFerryRPC_GetChatRoomMembers_FullMethodName = "/wechat_rpc.WeChatFerryRPC/GetChatRoomMembers"
	WeChatFerryRPC_GetFriends_FullMethodName         = "/wechat_rpc.WeChatFerryRPC/GetFriends"
	WeChatFerryRPC_GetOcrResult_FullMethodName       = "/wechat_rpc.WeChatFerryRPC/GetOcrResult"
	WeChatFerryRPC_GetQrcode_FullMethodName          = "/wechat_rpc.WeChatFerryRPC/GetQrcode"
	WeChatFerryRPC_GetTables_FullMethodName          = "/wechat_rpc.WeChatFerryRPC/GetTables"
	WeChatFerryRPC_IsReceivingMsg_FullMethodName     = "/wechat_rpc.WeChatFerryRPC/IsReceivingMsg"
	WeChatFerryRPC_GetMsg_FullMethodName             = "/wechat_rpc.WeChatFerryRPC/GetMsg"
)

// WeChatFerryRPCClient is the client API for WeChatFerryRPC service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// WeChatFerry RPC 服务
type WeChatFerryRPCClient interface {
	// 是否已登录
	IsLogin(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*BoolResponse, error)
	// 获取登录账户的 wxid
	GetSelfWxid(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*StringResponse, error)
	// 获取所有消息类型
	GetMsgTypes(ctx context.Context, in *Empty, opts ...grpc.CallOption) (grpc.ServerStreamingClient[WxMsg], error)
	// 获取完整通讯录
	GetContacts(ctx context.Context, in *Empty, opts ...grpc.CallOption) (grpc.ServerStreamingClient[RpcContact], error)
	// 获取所有数据库名称
	GetDbNames(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*DbNames, error)
	// 获取指定数据库的所有表
	GetDbTables(ctx context.Context, in *DbQuery, opts ...grpc.CallOption) (*DbTables, error)
	// 获取登录账号个人信息
	GetUserInfo(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*RpcContact, error)
	// 获取语音消息并转成 MP3
	GetAudioMsg(ctx context.Context, in *GetAudioMsgRequest, opts ...grpc.CallOption) (*StringResponse, error)
	// 发送文本消息
	SendText(ctx context.Context, in *TextMsg, opts ...grpc.CallOption) (*IntResponse, error)
	// 发送图片
	SendImage(ctx context.Context, in *PathMsg, opts ...grpc.CallOption) (*IntResponse, error)
	// 发送文件
	SendFile(ctx context.Context, in *PathMsg, opts ...grpc.CallOption) (*IntResponse, error)
	// 发送 XML
	SendXml(ctx context.Context, in *XmlMsg, opts ...grpc.CallOption) (*IntResponse, error)
	// 发送表情
	SendEmotion(ctx context.Context, in *PathMsg, opts ...grpc.CallOption) (*IntResponse, error)
	// 发送富文本消息
	SendRichText(ctx context.Context, in *RichText, opts ...grpc.CallOption) (*IntResponse, error)
	// 发送拍一拍消息
	SendPatMsg(ctx context.Context, in *PatMsg, opts ...grpc.CallOption) (*IntResponse, error)
	// 转发消息
	ForwardMsg(ctx context.Context, in *ForwardMsgRequest, opts ...grpc.CallOption) (*IntResponse, error)
	// 启用接收消息
	EnableRecvMsg(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*BoolResponse, error)
	// 禁用接收消息
	DisableRecvMsg(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*IntResponse, error)
	// 执行 SQL 查询
	ExecDbQuery(ctx context.Context, in *DbQuery, opts ...grpc.CallOption) (*DbRows, error)
	// 通过好友申请
	AcceptFriend(ctx context.Context, in *Verification, opts ...grpc.CallOption) (*IntResponse, error)
	// 接收转账
	ReceiveTransfer(ctx context.Context, in *Transfer, opts ...grpc.CallOption) (*IntResponse, error)
	// 刷新朋友圈
	RefreshPyq(ctx context.Context, in *RefreshPyqRequest, opts ...grpc.CallOption) (*IntResponse, error)
	// 下载附件
	DownloadAttach(ctx context.Context, in *DownloadAttachRequest, opts ...grpc.CallOption) (*IntResponse, error)
	// 通过 wxid 获取联系人信息
	GetInfoByWxid(ctx context.Context, in *StringResponse, opts ...grpc.CallOption) (*RpcContact, error)
	// 撤回消息
	RevokeMsg(ctx context.Context, in *IntResponse, opts ...grpc.CallOption) (*IntResponse, error)
	// 刷新二维码
	RefreshQrcode(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*StringResponse, error)
	// 解密图片
	DecryptImage(ctx context.Context, in *DecPath, opts ...grpc.CallOption) (*StringResponse, error)
	// 执行 OCR 识别
	ExecOcr(ctx context.Context, in *OcrMsg, opts ...grpc.CallOption) (*StringResponse, error)
	// 添加群成员
	AddRoomMembers(ctx context.Context, in *MemberMgmt, opts ...grpc.CallOption) (*IntResponse, error)
	// 删除群成员
	DelRoomMembers(ctx context.Context, in *MemberMgmt, opts ...grpc.CallOption) (*IntResponse, error)
	// 邀请群成员
	InvRoomMembers(ctx context.Context, in *MemberMgmt, opts ...grpc.CallOption) (*IntResponse, error)
	// 获取群名片
	GetAliasInChatRoom(ctx context.Context, in *GetAliasInChatRoomRequest, opts ...grpc.CallOption) (*StringResponse, error)
	// 获取群成员
	GetChatRoomMembers(ctx context.Context, in *StringResponse, opts ...grpc.CallOption) (*ChatRoomMembers, error)
	// 获取好友列表
	GetFriends(ctx context.Context, in *Empty, opts ...grpc.CallOption) (grpc.ServerStreamingClient[RpcContact], error)
	// 获取 OCR 结果
	GetOcrResult(ctx context.Context, in *OcrMsg, opts ...grpc.CallOption) (*StringResponse, error)
	// 获取登录二维码
	GetQrcode(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*StringResponse, error)
	// 获取 db 中所有表
	GetTables(ctx context.Context, in *DbQuery, opts ...grpc.CallOption) (*DbTables, error)
	// 是否已启动接收消息功能
	IsReceivingMsg(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*BoolResponse, error)
	// 获取消息
	GetMsg(ctx context.Context, in *GetMsgRequest, opts ...grpc.CallOption) (*WxMsg, error)
}

type weChatFerryRPCClient struct {
	cc grpc.ClientConnInterface
}

func NewWeChatFerryRPCClient(cc grpc.ClientConnInterface) WeChatFerryRPCClient {
	return &weChatFerryRPCClient{cc}
}

func (c *weChatFerryRPCClient) IsLogin(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*BoolResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BoolResponse)
	err := c.cc.Invoke(ctx, WeChatFerryRPC_IsLogin_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *weChatFerryRPCClient) GetSelfWxid(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*StringResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StringResponse)
	err := c.cc.Invoke(ctx, WeChatFerryRPC_GetSelfWxid_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *weChatFerryRPCClient) GetMsgTypes(ctx context.Context, in *Empty, opts ...grpc.CallOption) (grpc.ServerStreamingClient[WxMsg], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &WeChatFerryRPC_ServiceDesc.Streams[0], WeChatFerryRPC_GetMsgTypes_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[Empty, WxMsg]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type WeChatFerryRPC_GetMsgTypesClient = grpc.ServerStreamingClient[WxMsg]

func (c *weChatFerryRPCClient) GetContacts(ctx context.Context, in *Empty, opts ...grpc.CallOption) (grpc.ServerStreamingClient[RpcContact], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &WeChatFerryRPC_ServiceDesc.Streams[1], WeChatFerryRPC_GetContacts_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[Empty, RpcContact]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type WeChatFerryRPC_GetContactsClient = grpc.ServerStreamingClient[RpcContact]

func (c *weChatFerryRPCClient) GetDbNames(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*DbNames, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DbNames)
	err := c.cc.Invoke(ctx, WeChatFerryRPC_GetDbNames_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *weChatFerryRPCClient) GetDbTables(ctx context.Context, in *DbQuery, opts ...grpc.CallOption) (*DbTables, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DbTables)
	err := c.cc.Invoke(ctx, WeChatFerryRPC_GetDbTables_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *weChatFerryRPCClient) GetUserInfo(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*RpcContact, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RpcContact)
	err := c.cc.Invoke(ctx, WeChatFerryRPC_GetUserInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *weChatFerryRPCClient) GetAudioMsg(ctx context.Context, in *GetAudioMsgRequest, opts ...grpc.CallOption) (*StringResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StringResponse)
	err := c.cc.Invoke(ctx, WeChatFerryRPC_GetAudioMsg_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *weChatFerryRPCClient) SendText(ctx context.Context, in *TextMsg, opts ...grpc.CallOption) (*IntResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IntResponse)
	err := c.cc.Invoke(ctx, WeChatFerryRPC_SendText_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *weChatFerryRPCClient) SendImage(ctx context.Context, in *PathMsg, opts ...grpc.CallOption) (*IntResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IntResponse)
	err := c.cc.Invoke(ctx, WeChatFerryRPC_SendImage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *weChatFerryRPCClient) SendFile(ctx context.Context, in *PathMsg, opts ...grpc.CallOption) (*IntResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IntResponse)
	err := c.cc.Invoke(ctx, WeChatFerryRPC_SendFile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *weChatFerryRPCClient) SendXml(ctx context.Context, in *XmlMsg, opts ...grpc.CallOption) (*IntResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IntResponse)
	err := c.cc.Invoke(ctx, WeChatFerryRPC_SendXml_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *weChatFerryRPCClient) SendEmotion(ctx context.Context, in *PathMsg, opts ...grpc.CallOption) (*IntResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IntResponse)
	err := c.cc.Invoke(ctx, WeChatFerryRPC_SendEmotion_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *weChatFerryRPCClient) SendRichText(ctx context.Context, in *RichText, opts ...grpc.CallOption) (*IntResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IntResponse)
	err := c.cc.Invoke(ctx, WeChatFerryRPC_SendRichText_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *weChatFerryRPCClient) SendPatMsg(ctx context.Context, in *PatMsg, opts ...grpc.CallOption) (*IntResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IntResponse)
	err := c.cc.Invoke(ctx, WeChatFerryRPC_SendPatMsg_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *weChatFerryRPCClient) ForwardMsg(ctx context.Context, in *ForwardMsgRequest, opts ...grpc.CallOption) (*IntResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IntResponse)
	err := c.cc.Invoke(ctx, WeChatFerryRPC_ForwardMsg_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *weChatFerryRPCClient) EnableRecvMsg(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*BoolResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BoolResponse)
	err := c.cc.Invoke(ctx, WeChatFerryRPC_EnableRecvMsg_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *weChatFerryRPCClient) DisableRecvMsg(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*IntResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IntResponse)
	err := c.cc.Invoke(ctx, WeChatFerryRPC_DisableRecvMsg_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *weChatFerryRPCClient) ExecDbQuery(ctx context.Context, in *DbQuery, opts ...grpc.CallOption) (*DbRows, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DbRows)
	err := c.cc.Invoke(ctx, WeChatFerryRPC_ExecDbQuery_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *weChatFerryRPCClient) AcceptFriend(ctx context.Context, in *Verification, opts ...grpc.CallOption) (*IntResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IntResponse)
	err := c.cc.Invoke(ctx, WeChatFerryRPC_AcceptFriend_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *weChatFerryRPCClient) ReceiveTransfer(ctx context.Context, in *Transfer, opts ...grpc.CallOption) (*IntResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IntResponse)
	err := c.cc.Invoke(ctx, WeChatFerryRPC_ReceiveTransfer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *weChatFerryRPCClient) RefreshPyq(ctx context.Context, in *RefreshPyqRequest, opts ...grpc.CallOption) (*IntResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IntResponse)
	err := c.cc.Invoke(ctx, WeChatFerryRPC_RefreshPyq_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *weChatFerryRPCClient) DownloadAttach(ctx context.Context, in *DownloadAttachRequest, opts ...grpc.CallOption) (*IntResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IntResponse)
	err := c.cc.Invoke(ctx, WeChatFerryRPC_DownloadAttach_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *weChatFerryRPCClient) GetInfoByWxid(ctx context.Context, in *StringResponse, opts ...grpc.CallOption) (*RpcContact, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RpcContact)
	err := c.cc.Invoke(ctx, WeChatFerryRPC_GetInfoByWxid_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *weChatFerryRPCClient) RevokeMsg(ctx context.Context, in *IntResponse, opts ...grpc.CallOption) (*IntResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IntResponse)
	err := c.cc.Invoke(ctx, WeChatFerryRPC_RevokeMsg_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *weChatFerryRPCClient) RefreshQrcode(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*StringResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StringResponse)
	err := c.cc.Invoke(ctx, WeChatFerryRPC_RefreshQrcode_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *weChatFerryRPCClient) DecryptImage(ctx context.Context, in *DecPath, opts ...grpc.CallOption) (*StringResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StringResponse)
	err := c.cc.Invoke(ctx, WeChatFerryRPC_DecryptImage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *weChatFerryRPCClient) ExecOcr(ctx context.Context, in *OcrMsg, opts ...grpc.CallOption) (*StringResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StringResponse)
	err := c.cc.Invoke(ctx, WeChatFerryRPC_ExecOcr_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *weChatFerryRPCClient) AddRoomMembers(ctx context.Context, in *MemberMgmt, opts ...grpc.CallOption) (*IntResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IntResponse)
	err := c.cc.Invoke(ctx, WeChatFerryRPC_AddRoomMembers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *weChatFerryRPCClient) DelRoomMembers(ctx context.Context, in *MemberMgmt, opts ...grpc.CallOption) (*IntResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IntResponse)
	err := c.cc.Invoke(ctx, WeChatFerryRPC_DelRoomMembers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *weChatFerryRPCClient) InvRoomMembers(ctx context.Context, in *MemberMgmt, opts ...grpc.CallOption) (*IntResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IntResponse)
	err := c.cc.Invoke(ctx, WeChatFerryRPC_InvRoomMembers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *weChatFerryRPCClient) GetAliasInChatRoom(ctx context.Context, in *GetAliasInChatRoomRequest, opts ...grpc.CallOption) (*StringResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StringResponse)
	err := c.cc.Invoke(ctx, WeChatFerryRPC_GetAliasInChatRoom_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *weChatFerryRPCClient) GetChatRoomMembers(ctx context.Context, in *StringResponse, opts ...grpc.CallOption) (*ChatRoomMembers, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ChatRoomMembers)
	err := c.cc.Invoke(ctx, WeChatFerryRPC_GetChatRoomMembers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *weChatFerryRPCClient) GetFriends(ctx context.Context, in *Empty, opts ...grpc.CallOption) (grpc.ServerStreamingClient[RpcContact], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &WeChatFerryRPC_ServiceDesc.Streams[2], WeChatFerryRPC_GetFriends_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[Empty, RpcContact]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type WeChatFerryRPC_GetFriendsClient = grpc.ServerStreamingClient[RpcContact]

func (c *weChatFerryRPCClient) GetOcrResult(ctx context.Context, in *OcrMsg, opts ...grpc.CallOption) (*StringResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StringResponse)
	err := c.cc.Invoke(ctx, WeChatFerryRPC_GetOcrResult_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *weChatFerryRPCClient) GetQrcode(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*StringResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StringResponse)
	err := c.cc.Invoke(ctx, WeChatFerryRPC_GetQrcode_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *weChatFerryRPCClient) GetTables(ctx context.Context, in *DbQuery, opts ...grpc.CallOption) (*DbTables, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DbTables)
	err := c.cc.Invoke(ctx, WeChatFerryRPC_GetTables_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *weChatFerryRPCClient) IsReceivingMsg(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*BoolResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BoolResponse)
	err := c.cc.Invoke(ctx, WeChatFerryRPC_IsReceivingMsg_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *weChatFerryRPCClient) GetMsg(ctx context.Context, in *GetMsgRequest, opts ...grpc.CallOption) (*WxMsg, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(WxMsg)
	err := c.cc.Invoke(ctx, WeChatFerryRPC_GetMsg_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WeChatFerryRPCServer is the server API for WeChatFerryRPC service.
// All implementations must embed UnimplementedWeChatFerryRPCServer
// for forward compatibility.
//
// WeChatFerry RPC 服务
type WeChatFerryRPCServer interface {
	// 是否已登录
	IsLogin(context.Context, *Empty) (*BoolResponse, error)
	// 获取登录账户的 wxid
	GetSelfWxid(context.Context, *Empty) (*StringResponse, error)
	// 获取所有消息类型
	GetMsgTypes(*Empty, grpc.ServerStreamingServer[WxMsg]) error
	// 获取完整通讯录
	GetContacts(*Empty, grpc.ServerStreamingServer[RpcContact]) error
	// 获取所有数据库名称
	GetDbNames(context.Context, *Empty) (*DbNames, error)
	// 获取指定数据库的所有表
	GetDbTables(context.Context, *DbQuery) (*DbTables, error)
	// 获取登录账号个人信息
	GetUserInfo(context.Context, *Empty) (*RpcContact, error)
	// 获取语音消息并转成 MP3
	GetAudioMsg(context.Context, *GetAudioMsgRequest) (*StringResponse, error)
	// 发送文本消息
	SendText(context.Context, *TextMsg) (*IntResponse, error)
	// 发送图片
	SendImage(context.Context, *PathMsg) (*IntResponse, error)
	// 发送文件
	SendFile(context.Context, *PathMsg) (*IntResponse, error)
	// 发送 XML
	SendXml(context.Context, *XmlMsg) (*IntResponse, error)
	// 发送表情
	SendEmotion(context.Context, *PathMsg) (*IntResponse, error)
	// 发送富文本消息
	SendRichText(context.Context, *RichText) (*IntResponse, error)
	// 发送拍一拍消息
	SendPatMsg(context.Context, *PatMsg) (*IntResponse, error)
	// 转发消息
	ForwardMsg(context.Context, *ForwardMsgRequest) (*IntResponse, error)
	// 启用接收消息
	EnableRecvMsg(context.Context, *Empty) (*BoolResponse, error)
	// 禁用接收消息
	DisableRecvMsg(context.Context, *Empty) (*IntResponse, error)
	// 执行 SQL 查询
	ExecDbQuery(context.Context, *DbQuery) (*DbRows, error)
	// 通过好友申请
	AcceptFriend(context.Context, *Verification) (*IntResponse, error)
	// 接收转账
	ReceiveTransfer(context.Context, *Transfer) (*IntResponse, error)
	// 刷新朋友圈
	RefreshPyq(context.Context, *RefreshPyqRequest) (*IntResponse, error)
	// 下载附件
	DownloadAttach(context.Context, *DownloadAttachRequest) (*IntResponse, error)
	// 通过 wxid 获取联系人信息
	GetInfoByWxid(context.Context, *StringResponse) (*RpcContact, error)
	// 撤回消息
	RevokeMsg(context.Context, *IntResponse) (*IntResponse, error)
	// 刷新二维码
	RefreshQrcode(context.Context, *Empty) (*StringResponse, error)
	// 解密图片
	DecryptImage(context.Context, *DecPath) (*StringResponse, error)
	// 执行 OCR 识别
	ExecOcr(context.Context, *OcrMsg) (*StringResponse, error)
	// 添加群成员
	AddRoomMembers(context.Context, *MemberMgmt) (*IntResponse, error)
	// 删除群成员
	DelRoomMembers(context.Context, *MemberMgmt) (*IntResponse, error)
	// 邀请群成员
	InvRoomMembers(context.Context, *MemberMgmt) (*IntResponse, error)
	// 获取群名片
	GetAliasInChatRoom(context.Context, *GetAliasInChatRoomRequest) (*StringResponse, error)
	// 获取群成员
	GetChatRoomMembers(context.Context, *StringResponse) (*ChatRoomMembers, error)
	// 获取好友列表
	GetFriends(*Empty, grpc.ServerStreamingServer[RpcContact]) error
	// 获取 OCR 结果
	GetOcrResult(context.Context, *OcrMsg) (*StringResponse, error)
	// 获取登录二维码
	GetQrcode(context.Context, *Empty) (*StringResponse, error)
	// 获取 db 中所有表
	GetTables(context.Context, *DbQuery) (*DbTables, error)
	// 是否已启动接收消息功能
	IsReceivingMsg(context.Context, *Empty) (*BoolResponse, error)
	// 获取消息
	GetMsg(context.Context, *GetMsgRequest) (*WxMsg, error)
	mustEmbedUnimplementedWeChatFerryRPCServer()
}

// UnimplementedWeChatFerryRPCServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedWeChatFerryRPCServer struct{}

func (UnimplementedWeChatFerryRPCServer) IsLogin(context.Context, *Empty) (*BoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsLogin not implemented")
}
func (UnimplementedWeChatFerryRPCServer) GetSelfWxid(context.Context, *Empty) (*StringResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSelfWxid not implemented")
}
func (UnimplementedWeChatFerryRPCServer) GetMsgTypes(*Empty, grpc.ServerStreamingServer[WxMsg]) error {
	return status.Errorf(codes.Unimplemented, "method GetMsgTypes not implemented")
}
func (UnimplementedWeChatFerryRPCServer) GetContacts(*Empty, grpc.ServerStreamingServer[RpcContact]) error {
	return status.Errorf(codes.Unimplemented, "method GetContacts not implemented")
}
func (UnimplementedWeChatFerryRPCServer) GetDbNames(context.Context, *Empty) (*DbNames, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDbNames not implemented")
}
func (UnimplementedWeChatFerryRPCServer) GetDbTables(context.Context, *DbQuery) (*DbTables, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDbTables not implemented")
}
func (UnimplementedWeChatFerryRPCServer) GetUserInfo(context.Context, *Empty) (*RpcContact, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserInfo not implemented")
}
func (UnimplementedWeChatFerryRPCServer) GetAudioMsg(context.Context, *GetAudioMsgRequest) (*StringResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAudioMsg not implemented")
}
func (UnimplementedWeChatFerryRPCServer) SendText(context.Context, *TextMsg) (*IntResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendText not implemented")
}
func (UnimplementedWeChatFerryRPCServer) SendImage(context.Context, *PathMsg) (*IntResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendImage not implemented")
}
func (UnimplementedWeChatFerryRPCServer) SendFile(context.Context, *PathMsg) (*IntResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendFile not implemented")
}
func (UnimplementedWeChatFerryRPCServer) SendXml(context.Context, *XmlMsg) (*IntResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendXml not implemented")
}
func (UnimplementedWeChatFerryRPCServer) SendEmotion(context.Context, *PathMsg) (*IntResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendEmotion not implemented")
}
func (UnimplementedWeChatFerryRPCServer) SendRichText(context.Context, *RichText) (*IntResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendRichText not implemented")
}
func (UnimplementedWeChatFerryRPCServer) SendPatMsg(context.Context, *PatMsg) (*IntResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendPatMsg not implemented")
}
func (UnimplementedWeChatFerryRPCServer) ForwardMsg(context.Context, *ForwardMsgRequest) (*IntResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ForwardMsg not implemented")
}
func (UnimplementedWeChatFerryRPCServer) EnableRecvMsg(context.Context, *Empty) (*BoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnableRecvMsg not implemented")
}
func (UnimplementedWeChatFerryRPCServer) DisableRecvMsg(context.Context, *Empty) (*IntResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DisableRecvMsg not implemented")
}
func (UnimplementedWeChatFerryRPCServer) ExecDbQuery(context.Context, *DbQuery) (*DbRows, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecDbQuery not implemented")
}
func (UnimplementedWeChatFerryRPCServer) AcceptFriend(context.Context, *Verification) (*IntResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AcceptFriend not implemented")
}
func (UnimplementedWeChatFerryRPCServer) ReceiveTransfer(context.Context, *Transfer) (*IntResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReceiveTransfer not implemented")
}
func (UnimplementedWeChatFerryRPCServer) RefreshPyq(context.Context, *RefreshPyqRequest) (*IntResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RefreshPyq not implemented")
}
func (UnimplementedWeChatFerryRPCServer) DownloadAttach(context.Context, *DownloadAttachRequest) (*IntResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DownloadAttach not implemented")
}
func (UnimplementedWeChatFerryRPCServer) GetInfoByWxid(context.Context, *StringResponse) (*RpcContact, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInfoByWxid not implemented")
}
func (UnimplementedWeChatFerryRPCServer) RevokeMsg(context.Context, *IntResponse) (*IntResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RevokeMsg not implemented")
}
func (UnimplementedWeChatFerryRPCServer) RefreshQrcode(context.Context, *Empty) (*StringResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RefreshQrcode not implemented")
}
func (UnimplementedWeChatFerryRPCServer) DecryptImage(context.Context, *DecPath) (*StringResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DecryptImage not implemented")
}
func (UnimplementedWeChatFerryRPCServer) ExecOcr(context.Context, *OcrMsg) (*StringResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecOcr not implemented")
}
func (UnimplementedWeChatFerryRPCServer) AddRoomMembers(context.Context, *MemberMgmt) (*IntResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddRoomMembers not implemented")
}
func (UnimplementedWeChatFerryRPCServer) DelRoomMembers(context.Context, *MemberMgmt) (*IntResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelRoomMembers not implemented")
}
func (UnimplementedWeChatFerryRPCServer) InvRoomMembers(context.Context, *MemberMgmt) (*IntResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InvRoomMembers not implemented")
}
func (UnimplementedWeChatFerryRPCServer) GetAliasInChatRoom(context.Context, *GetAliasInChatRoomRequest) (*StringResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAliasInChatRoom not implemented")
}
func (UnimplementedWeChatFerryRPCServer) GetChatRoomMembers(context.Context, *StringResponse) (*ChatRoomMembers, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChatRoomMembers not implemented")
}
func (UnimplementedWeChatFerryRPCServer) GetFriends(*Empty, grpc.ServerStreamingServer[RpcContact]) error {
	return status.Errorf(codes.Unimplemented, "method GetFriends not implemented")
}
func (UnimplementedWeChatFerryRPCServer) GetOcrResult(context.Context, *OcrMsg) (*StringResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOcrResult not implemented")
}
func (UnimplementedWeChatFerryRPCServer) GetQrcode(context.Context, *Empty) (*StringResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetQrcode not implemented")
}
func (UnimplementedWeChatFerryRPCServer) GetTables(context.Context, *DbQuery) (*DbTables, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTables not implemented")
}
func (UnimplementedWeChatFerryRPCServer) IsReceivingMsg(context.Context, *Empty) (*BoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsReceivingMsg not implemented")
}
func (UnimplementedWeChatFerryRPCServer) GetMsg(context.Context, *GetMsgRequest) (*WxMsg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMsg not implemented")
}
func (UnimplementedWeChatFerryRPCServer) mustEmbedUnimplementedWeChatFerryRPCServer() {}
func (UnimplementedWeChatFerryRPCServer) testEmbeddedByValue()                        {}

// UnsafeWeChatFerryRPCServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WeChatFerryRPCServer will
// result in compilation errors.
type UnsafeWeChatFerryRPCServer interface {
	mustEmbedUnimplementedWeChatFerryRPCServer()
}

func RegisterWeChatFerryRPCServer(s grpc.ServiceRegistrar, srv WeChatFerryRPCServer) {
	// If the following call pancis, it indicates UnimplementedWeChatFerryRPCServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&WeChatFerryRPC_ServiceDesc, srv)
}

func _WeChatFerryRPC_IsLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WeChatFerryRPCServer).IsLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WeChatFerryRPC_IsLogin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WeChatFerryRPCServer).IsLogin(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _WeChatFerryRPC_GetSelfWxid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WeChatFerryRPCServer).GetSelfWxid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WeChatFerryRPC_GetSelfWxid_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WeChatFerryRPCServer).GetSelfWxid(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _WeChatFerryRPC_GetMsgTypes_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(WeChatFerryRPCServer).GetMsgTypes(m, &grpc.GenericServerStream[Empty, WxMsg]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type WeChatFerryRPC_GetMsgTypesServer = grpc.ServerStreamingServer[WxMsg]

func _WeChatFerryRPC_GetContacts_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(WeChatFerryRPCServer).GetContacts(m, &grpc.GenericServerStream[Empty, RpcContact]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type WeChatFerryRPC_GetContactsServer = grpc.ServerStreamingServer[RpcContact]

func _WeChatFerryRPC_GetDbNames_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WeChatFerryRPCServer).GetDbNames(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WeChatFerryRPC_GetDbNames_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WeChatFerryRPCServer).GetDbNames(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _WeChatFerryRPC_GetDbTables_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DbQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WeChatFerryRPCServer).GetDbTables(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WeChatFerryRPC_GetDbTables_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WeChatFerryRPCServer).GetDbTables(ctx, req.(*DbQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _WeChatFerryRPC_GetUserInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WeChatFerryRPCServer).GetUserInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WeChatFerryRPC_GetUserInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WeChatFerryRPCServer).GetUserInfo(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _WeChatFerryRPC_GetAudioMsg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAudioMsgRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WeChatFerryRPCServer).GetAudioMsg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WeChatFerryRPC_GetAudioMsg_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WeChatFerryRPCServer).GetAudioMsg(ctx, req.(*GetAudioMsgRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WeChatFerryRPC_SendText_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TextMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WeChatFerryRPCServer).SendText(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WeChatFerryRPC_SendText_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WeChatFerryRPCServer).SendText(ctx, req.(*TextMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _WeChatFerryRPC_SendImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PathMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WeChatFerryRPCServer).SendImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WeChatFerryRPC_SendImage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WeChatFerryRPCServer).SendImage(ctx, req.(*PathMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _WeChatFerryRPC_SendFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PathMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WeChatFerryRPCServer).SendFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WeChatFerryRPC_SendFile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WeChatFerryRPCServer).SendFile(ctx, req.(*PathMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _WeChatFerryRPC_SendXml_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(XmlMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WeChatFerryRPCServer).SendXml(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WeChatFerryRPC_SendXml_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WeChatFerryRPCServer).SendXml(ctx, req.(*XmlMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _WeChatFerryRPC_SendEmotion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PathMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WeChatFerryRPCServer).SendEmotion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WeChatFerryRPC_SendEmotion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WeChatFerryRPCServer).SendEmotion(ctx, req.(*PathMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _WeChatFerryRPC_SendRichText_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RichText)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WeChatFerryRPCServer).SendRichText(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WeChatFerryRPC_SendRichText_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WeChatFerryRPCServer).SendRichText(ctx, req.(*RichText))
	}
	return interceptor(ctx, in, info, handler)
}

func _WeChatFerryRPC_SendPatMsg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PatMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WeChatFerryRPCServer).SendPatMsg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WeChatFerryRPC_SendPatMsg_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WeChatFerryRPCServer).SendPatMsg(ctx, req.(*PatMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _WeChatFerryRPC_ForwardMsg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ForwardMsgRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WeChatFerryRPCServer).ForwardMsg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WeChatFerryRPC_ForwardMsg_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WeChatFerryRPCServer).ForwardMsg(ctx, req.(*ForwardMsgRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WeChatFerryRPC_EnableRecvMsg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WeChatFerryRPCServer).EnableRecvMsg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WeChatFerryRPC_EnableRecvMsg_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WeChatFerryRPCServer).EnableRecvMsg(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _WeChatFerryRPC_DisableRecvMsg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WeChatFerryRPCServer).DisableRecvMsg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WeChatFerryRPC_DisableRecvMsg_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WeChatFerryRPCServer).DisableRecvMsg(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _WeChatFerryRPC_ExecDbQuery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DbQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WeChatFerryRPCServer).ExecDbQuery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WeChatFerryRPC_ExecDbQuery_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WeChatFerryRPCServer).ExecDbQuery(ctx, req.(*DbQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _WeChatFerryRPC_AcceptFriend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Verification)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WeChatFerryRPCServer).AcceptFriend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WeChatFerryRPC_AcceptFriend_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WeChatFerryRPCServer).AcceptFriend(ctx, req.(*Verification))
	}
	return interceptor(ctx, in, info, handler)
}

func _WeChatFerryRPC_ReceiveTransfer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Transfer)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WeChatFerryRPCServer).ReceiveTransfer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WeChatFerryRPC_ReceiveTransfer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WeChatFerryRPCServer).ReceiveTransfer(ctx, req.(*Transfer))
	}
	return interceptor(ctx, in, info, handler)
}

func _WeChatFerryRPC_RefreshPyq_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RefreshPyqRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WeChatFerryRPCServer).RefreshPyq(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WeChatFerryRPC_RefreshPyq_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WeChatFerryRPCServer).RefreshPyq(ctx, req.(*RefreshPyqRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WeChatFerryRPC_DownloadAttach_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DownloadAttachRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WeChatFerryRPCServer).DownloadAttach(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WeChatFerryRPC_DownloadAttach_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WeChatFerryRPCServer).DownloadAttach(ctx, req.(*DownloadAttachRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WeChatFerryRPC_GetInfoByWxid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StringResponse)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WeChatFerryRPCServer).GetInfoByWxid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WeChatFerryRPC_GetInfoByWxid_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WeChatFerryRPCServer).GetInfoByWxid(ctx, req.(*StringResponse))
	}
	return interceptor(ctx, in, info, handler)
}

func _WeChatFerryRPC_RevokeMsg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IntResponse)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WeChatFerryRPCServer).RevokeMsg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WeChatFerryRPC_RevokeMsg_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WeChatFerryRPCServer).RevokeMsg(ctx, req.(*IntResponse))
	}
	return interceptor(ctx, in, info, handler)
}

func _WeChatFerryRPC_RefreshQrcode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WeChatFerryRPCServer).RefreshQrcode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WeChatFerryRPC_RefreshQrcode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WeChatFerryRPCServer).RefreshQrcode(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _WeChatFerryRPC_DecryptImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DecPath)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WeChatFerryRPCServer).DecryptImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WeChatFerryRPC_DecryptImage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WeChatFerryRPCServer).DecryptImage(ctx, req.(*DecPath))
	}
	return interceptor(ctx, in, info, handler)
}

func _WeChatFerryRPC_ExecOcr_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OcrMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WeChatFerryRPCServer).ExecOcr(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WeChatFerryRPC_ExecOcr_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WeChatFerryRPCServer).ExecOcr(ctx, req.(*OcrMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _WeChatFerryRPC_AddRoomMembers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MemberMgmt)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WeChatFerryRPCServer).AddRoomMembers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WeChatFerryRPC_AddRoomMembers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WeChatFerryRPCServer).AddRoomMembers(ctx, req.(*MemberMgmt))
	}
	return interceptor(ctx, in, info, handler)
}

func _WeChatFerryRPC_DelRoomMembers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MemberMgmt)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WeChatFerryRPCServer).DelRoomMembers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WeChatFerryRPC_DelRoomMembers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WeChatFerryRPCServer).DelRoomMembers(ctx, req.(*MemberMgmt))
	}
	return interceptor(ctx, in, info, handler)
}

func _WeChatFerryRPC_InvRoomMembers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MemberMgmt)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WeChatFerryRPCServer).InvRoomMembers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WeChatFerryRPC_InvRoomMembers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WeChatFerryRPCServer).InvRoomMembers(ctx, req.(*MemberMgmt))
	}
	return interceptor(ctx, in, info, handler)
}

func _WeChatFerryRPC_GetAliasInChatRoom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAliasInChatRoomRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WeChatFerryRPCServer).GetAliasInChatRoom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WeChatFerryRPC_GetAliasInChatRoom_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WeChatFerryRPCServer).GetAliasInChatRoom(ctx, req.(*GetAliasInChatRoomRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WeChatFerryRPC_GetChatRoomMembers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StringResponse)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WeChatFerryRPCServer).GetChatRoomMembers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WeChatFerryRPC_GetChatRoomMembers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WeChatFerryRPCServer).GetChatRoomMembers(ctx, req.(*StringResponse))
	}
	return interceptor(ctx, in, info, handler)
}

func _WeChatFerryRPC_GetFriends_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(WeChatFerryRPCServer).GetFriends(m, &grpc.GenericServerStream[Empty, RpcContact]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type WeChatFerryRPC_GetFriendsServer = grpc.ServerStreamingServer[RpcContact]

func _WeChatFerryRPC_GetOcrResult_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OcrMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WeChatFerryRPCServer).GetOcrResult(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WeChatFerryRPC_GetOcrResult_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WeChatFerryRPCServer).GetOcrResult(ctx, req.(*OcrMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _WeChatFerryRPC_GetQrcode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WeChatFerryRPCServer).GetQrcode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WeChatFerryRPC_GetQrcode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WeChatFerryRPCServer).GetQrcode(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _WeChatFerryRPC_GetTables_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DbQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WeChatFerryRPCServer).GetTables(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WeChatFerryRPC_GetTables_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WeChatFerryRPCServer).GetTables(ctx, req.(*DbQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _WeChatFerryRPC_IsReceivingMsg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WeChatFerryRPCServer).IsReceivingMsg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WeChatFerryRPC_IsReceivingMsg_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WeChatFerryRPCServer).IsReceivingMsg(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _WeChatFerryRPC_GetMsg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMsgRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WeChatFerryRPCServer).GetMsg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WeChatFerryRPC_GetMsg_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WeChatFerryRPCServer).GetMsg(ctx, req.(*GetMsgRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// WeChatFerryRPC_ServiceDesc is the grpc.ServiceDesc for WeChatFerryRPC service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WeChatFerryRPC_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "wechat_rpc.WeChatFerryRPC",
	HandlerType: (*WeChatFerryRPCServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "IsLogin",
			Handler:    _WeChatFerryRPC_IsLogin_Handler,
		},
		{
			MethodName: "GetSelfWxid",
			Handler:    _WeChatFerryRPC_GetSelfWxid_Handler,
		},
		{
			MethodName: "GetDbNames",
			Handler:    _WeChatFerryRPC_GetDbNames_Handler,
		},
		{
			MethodName: "GetDbTables",
			Handler:    _WeChatFerryRPC_GetDbTables_Handler,
		},
		{
			MethodName: "GetUserInfo",
			Handler:    _WeChatFerryRPC_GetUserInfo_Handler,
		},
		{
			MethodName: "GetAudioMsg",
			Handler:    _WeChatFerryRPC_GetAudioMsg_Handler,
		},
		{
			MethodName: "SendText",
			Handler:    _WeChatFerryRPC_SendText_Handler,
		},
		{
			MethodName: "SendImage",
			Handler:    _WeChatFerryRPC_SendImage_Handler,
		},
		{
			MethodName: "SendFile",
			Handler:    _WeChatFerryRPC_SendFile_Handler,
		},
		{
			MethodName: "SendXml",
			Handler:    _WeChatFerryRPC_SendXml_Handler,
		},
		{
			MethodName: "SendEmotion",
			Handler:    _WeChatFerryRPC_SendEmotion_Handler,
		},
		{
			MethodName: "SendRichText",
			Handler:    _WeChatFerryRPC_SendRichText_Handler,
		},
		{
			MethodName: "SendPatMsg",
			Handler:    _WeChatFerryRPC_SendPatMsg_Handler,
		},
		{
			MethodName: "ForwardMsg",
			Handler:    _WeChatFerryRPC_ForwardMsg_Handler,
		},
		{
			MethodName: "EnableRecvMsg",
			Handler:    _WeChatFerryRPC_EnableRecvMsg_Handler,
		},
		{
			MethodName: "DisableRecvMsg",
			Handler:    _WeChatFerryRPC_DisableRecvMsg_Handler,
		},
		{
			MethodName: "ExecDbQuery",
			Handler:    _WeChatFerryRPC_ExecDbQuery_Handler,
		},
		{
			MethodName: "AcceptFriend",
			Handler:    _WeChatFerryRPC_AcceptFriend_Handler,
		},
		{
			MethodName: "ReceiveTransfer",
			Handler:    _WeChatFerryRPC_ReceiveTransfer_Handler,
		},
		{
			MethodName: "RefreshPyq",
			Handler:    _WeChatFerryRPC_RefreshPyq_Handler,
		},
		{
			MethodName: "DownloadAttach",
			Handler:    _WeChatFerryRPC_DownloadAttach_Handler,
		},
		{
			MethodName: "GetInfoByWxid",
			Handler:    _WeChatFerryRPC_GetInfoByWxid_Handler,
		},
		{
			MethodName: "RevokeMsg",
			Handler:    _WeChatFerryRPC_RevokeMsg_Handler,
		},
		{
			MethodName: "RefreshQrcode",
			Handler:    _WeChatFerryRPC_RefreshQrcode_Handler,
		},
		{
			MethodName: "DecryptImage",
			Handler:    _WeChatFerryRPC_DecryptImage_Handler,
		},
		{
			MethodName: "ExecOcr",
			Handler:    _WeChatFerryRPC_ExecOcr_Handler,
		},
		{
			MethodName: "AddRoomMembers",
			Handler:    _WeChatFerryRPC_AddRoomMembers_Handler,
		},
		{
			MethodName: "DelRoomMembers",
			Handler:    _WeChatFerryRPC_DelRoomMembers_Handler,
		},
		{
			MethodName: "InvRoomMembers",
			Handler:    _WeChatFerryRPC_InvRoomMembers_Handler,
		},
		{
			MethodName: "GetAliasInChatRoom",
			Handler:    _WeChatFerryRPC_GetAliasInChatRoom_Handler,
		},
		{
			MethodName: "GetChatRoomMembers",
			Handler:    _WeChatFerryRPC_GetChatRoomMembers_Handler,
		},
		{
			MethodName: "GetOcrResult",
			Handler:    _WeChatFerryRPC_GetOcrResult_Handler,
		},
		{
			MethodName: "GetQrcode",
			Handler:    _WeChatFerryRPC_GetQrcode_Handler,
		},
		{
			MethodName: "GetTables",
			Handler:    _WeChatFerryRPC_GetTables_Handler,
		},
		{
			MethodName: "IsReceivingMsg",
			Handler:    _WeChatFerryRPC_IsReceivingMsg_Handler,
		},
		{
			MethodName: "GetMsg",
			Handler:    _WeChatFerryRPC_GetMsg_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetMsgTypes",
			Handler:       _WeChatFerryRPC_GetMsgTypes_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetContacts",
			Handler:       _WeChatFerryRPC_GetContacts_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetFriends",
			Handler:       _WeChatFerryRPC_GetFriends_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/wechat_rpc.proto",
}
